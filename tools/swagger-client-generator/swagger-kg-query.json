{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Knowledge-Graph Query API"
  },
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in\nthe 'Authorization' header.\n\nA valid JWT token is generated by the API and returned.\n\nThe following syntax must be used in the 'Authorization' header :\n    Bearer: xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-apikeyInfoFunc": "src.utils.connexion_auth.api_key_info"
    }
  },
  "basePath": "/query/v1",
  "paths": {
    "/graph/status": {
      "get": {
        "tags": [
          "Description"
        ],
        "description": "Get graph status (health check)",
        "operationId": "get_graph_status",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responseModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/version": {
      "get": {
        "tags": [
          "Description"
        ],
        "description": "Get graph-version",
        "operationId": "get_graph_version",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responseModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/modules": {
      "get": {
        "tags": [
          "Description"
        ],
        "description": "Get graph-modules",
        "operationId": "get_graph_modules",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responseModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/description": {
      "get": {
        "tags": [
          "Description"
        ],
        "description": "Get a description of the graph",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "operationId": "get_graph_description",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GraphDescription"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/inspect/nodeCategories": {
      "get": {
        "tags": [
          "Inspect"
        ],
        "description": "Get an image of the node-categories",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "operationId": "inspect_node_categories",
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/inspect/graphEdges": {
      "get": {
        "tags": [
          "Inspect"
        ],
        "description": "Get an image of the edges",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "operationId": "inspect_graph_edges",
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/graph/inspect/graphTopology": {
      "get": {
        "tags": [
          "Inspect"
        ],
        "description": "Get an image of the topology of the graph",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "operationId": "inspect_graph_topology",
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodes/byIndices": {
      "post": {
        "tags": [
          "Node-Retrieval"
        ],
        "description": "Retrieve nodes by their graph-index\n",
        "operationId": "retrieve_nodes_by_indices",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "indices",
            "in": "body",
            "description": "Array of node indices",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodes/byNames": {
      "post": {
        "tags": [
          "Node-Retrieval"
        ],
        "description": "Retrieve nodes by their graph-index\n",
        "operationId": "retrieve_nodes_by_names",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "names",
            "in": "body",
            "description": "Array of node names",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned nodes, use -1 for all.",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodes/byCategories": {
      "post": {
        "tags": [
          "Node-Retrieval"
        ],
        "description": "Retrieve nodes by their categories\n",
        "operationId": "retrieve_nodes_by_categories",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "categories",
            "in": "body",
            "description": "Array of node categories",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned nodes, use -1 for all.",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodes/byDatabases": {
      "post": {
        "tags": [
          "Node-Retrieval"
        ],
        "description": "Retrieve nodes by their databases\n",
        "operationId": "retrieve_nodes_by_databases",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "databases",
            "in": "body",
            "description": "Array of node databases",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned nodes, use -1 for all.",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeDataJson": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the data associated with the nodes",
        "operationId": "retrieve_node_data_json",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "options",
            "in": "body",
            "required": false,
            "x-nullable": true,
            "schema": {
              "example": {
                "projection": {}
              },
              "type": "object",
              "default": "{}",
              "x-nullable": true,
              "properties": {
                "projection": {
                  "type": "object",
                  "description": "A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false})."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "description": "Dynamic",
              "additionalProperties": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveManyNodeDataJson": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Bulk retrieve the data associated with the nodes",
        "operationId": "retrieve_many_node_data_json",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "example": [
                {
                  "db": "db1-hash",
                  "ids": [
                    "node-id",
                    "node-id"
                  ],
                  "projection": {}
                },
                {
                  "db": "db2-hash",
                  "ids": [
                    "node-id",
                    "node-id"
                  ],
                  "projection": {
                    "text": true
                  }
                }
              ],
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "db": {
                    "type": "string"
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "projection": {
                    "type": "object",
                    "description": "A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false})."
                  }
                },
                "required": [
                  "db",
                  "ids"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "description": "Dynamic",
              "additionalProperties": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeAnnotations": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the Annotations associated with the nodes",
        "operationId": "retrieve_node_annotations",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "render_markup",
            "in": "query",
            "description": "If selected the output json will contain the rendered html snippets",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeDataImage": {
      "post": {
        "deprecated": true,
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the data associated with the nodes",
        "operationId": "retrieve_node_data_image",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeDataKeys": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the data keys available for the node",
        "operationId": "retrieve_node_data_keys",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeDataByKey": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the data associated with the nodes",
        "operationId": "retrieve_node_data_by_key",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "The data key to retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "query",
            "description": "The index for the data inside this key",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/retrieveNodeDataUrlByKey": {
      "post": {
        "tags": [
          "Node-Data-Retrieval"
        ],
        "description": "Retrieve the data associated with the nodes",
        "operationId": "retrieve_node_data_url_by_key",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "_db",
            "in": "query",
            "description": "Hash of the database (found in the `_db` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Hash of the database-entry (found in the `_id` field of the node)",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "The data key to retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "query",
            "description": "The index for the data inside this key",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/searchNodes/regex": {
      "post": {
        "tags": [
          "Node-Search"
        ],
        "description": "Search for nodes that have a name that matches the regular expressions.\n",
        "operationId": "search_nodes_regex",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "regularExpressions",
            "in": "body",
            "description": "regular expressions for node-names",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned nodes, use -1 for all.",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search only for nodes in this category. By default, we search in all categories.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/searchNodes/approximately": {
      "post": {
        "tags": [
          "Node-Search"
        ],
        "description": "Search for nodes that have an approximate name.\n",
        "operationId": "search_nodes_approximately",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "body",
            "description": "names contained in node",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "epsilon",
            "in": "query",
            "description": "similarity",
            "required": true,
            "type": "number",
            "format": "float",
            "default": 0.9,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned nodes, use -1 for all.",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search only for nodes in this category. By default, we search in all categories.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/nodesResponseModel"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/getNeighbours": {
      "post": {
        "deprecated": true,
        "tags": [
          "Query"
        ],
        "description": "Retrieve the neighbours of nodes.",
        "produces": [
          "application/json"
        ],
        "operationId": "query_get_neighbours",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "indices",
            "in": "body",
            "description": "node-indices",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "edge",
            "in": "query",
            "description": "Find neighbours of nodes for this edge only. By default, we search the neighbours over all edges.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the total number of neighbours returned.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/getDegree": {
      "post": {
        "tags": [
          "Query"
        ],
        "description": "Retrieve the in or out degree of nodes",
        "operationId": "query_get_degree",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "edge_name",
            "in": "query",
            "description": "name of the edge",
            "required": true,
            "type": "string"
          },
          {
            "name": "degree_type",
            "in": "query",
            "description": "select in or out degree of the nodes",
            "required": true,
            "type": "string",
            "enum": [
              "IN",
              "OUT"
            ]
          },
          {
            "name": "indices_type",
            "in": "query",
            "description": "select if you want to search in a specific set of indices or in a range of indices",
            "required": true,
            "type": "string",
            "enum": [
              "RANGE",
              "SET"
            ]
          },
          {
            "name": "indices",
            "in": "body",
            "description": "node-indices",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "x-tags": [
          {
            "tag": "query"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/getCorrelatedNodesFromIndices": {
      "post": {
        "tags": [
          "Query"
        ],
        "description": "Retrieve the correlated nodes for some initial nodes-indices.",
        "produces": [
          "application/json"
        ],
        "operationId": "query_get_correlated_nodes_from_indices",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "indices",
            "in": "body",
            "description": "node-indices",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "A",
            "in": "query",
            "description": "Find neighbours of nodes for this edge only.",
            "required": true,
            "type": "string"
          },
          {
            "name": "B",
            "in": "query",
            "description": "Find neighbours of nodes for this edge only.",
            "required": true,
            "type": "string"
          },
          {
            "name": "normalization",
            "in": "query",
            "description": "Rank the nodes according to L2- or Linf-normalization",
            "required": true,
            "type": "string",
            "enum": [
              "L1",
              "L2",
              "Linf"
            ],
            "default": "Linf"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the retrieved nodes by this category.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/getCorrelatedNodesFromNames": {
      "post": {
        "tags": [
          "Query"
        ],
        "description": "Retrieve the correlated nodes for some initial nodes-names.",
        "produces": [
          "application/json"
        ],
        "operationId": "query_get_correlated_nodes_from_names",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "names",
            "in": "body",
            "description": "Name of the nodes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "epsilon",
            "in": "query",
            "description": "Find all nodes with a name similarity above epsilon.",
            "required": true,
            "type": "number",
            "format": "float",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "A",
            "in": "query",
            "description": "Find neighbours of nodes for this edge only.",
            "required": true,
            "type": "string"
          },
          {
            "name": "B",
            "in": "query",
            "description": "Find neighbours of nodes for this edge only.",
            "required": true,
            "type": "string"
          },
          {
            "name": "normalization",
            "in": "query",
            "description": "Rank the nodes according to L2- or Linf-normalization",
            "required": true,
            "type": "string",
            "enum": [
              "L1",
              "L2",
              "Linf"
            ],
            "default": "Linf"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the retrieved nodes by this category",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/suggestWorkflow": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Suggest a workflow based on a given search string.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "query_suggest_workflow",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "search_string",
            "in": "query",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[\\'\\\"\\-\\w\\s]+$",
            "description": "Query string to generate a workflow for."
          }
        ],
        "responses": {
          "200": {
            "description": "A suggested workflow for this query."
          },
          "404": {
            "description": "No results were found for the given query."
          },
          "default": {
            "description": "An unexepected error."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/runWorkflow": {
      "post": {
        "tags": [
          "Query"
        ],
        "description": "Run a Directed Acyclic Graph (DAG) workflow",
        "produces": [
          "application/json"
        ],
        "operationId": "query_run_workflow",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "workflow",
            "in": "body",
            "description": "Input for Directed Acyclic Graph (DAG) workflow",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {}
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowResponse"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/runParallelWorkflow": {
      "post": {
        "tags": [
          "Query"
        ],
        "description": "Run in parallel Directed Acyclic Graph (DAG) workflows",
        "produces": [
          "application/json"
        ],
        "operationId": "query_run_parallel_workflow",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "parameters": [
          {
            "name": "pworkflow",
            "in": "body",
            "description": "Input for parallel Directed Acyclic Graph (DAG) workflows",
            "schema": {
              "type": "object"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/workflowResponseModel"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorModel"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/query/authConfig": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Retrieve the current auth config.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "query_auth_config",
        "x-swagger-router-controller": "query_v1.controllers.default_controller",
        "responses": {
          "200": {
            "description": "The current auth config.",
            "schema": {
              "$ref": "#/definitions/authConfig"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "definitions": {
    "errorModel": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "authConfig": {
      "type": "object",
      "properties": {
        "auth_method": {
          "type": "string"
        },
        "auth_url": {
          "type": "string"
        }
      }
    },
    "nodesResponseModel": {
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "required": [
            "parameters",
            "response"
          ],
          "properties": {
            "parameters": {
              "type": "object"
            },
            "response": {
              "type": "object",
              "required": [
                "nodes"
              ],
              "properties": {
                "nodes": {
                  "$ref": "#/definitions/arrayOfNodes"
                }
              }
            }
          }
        }
      ]
    },
    "workflowResponseModel": {
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "required": [
            "parameters",
            "response"
          ],
          "properties": {
            "parameters": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "response": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "arrayOfNodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/node"
      }
    },
    "node": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "synonyms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "database": {
          "type": "object"
        }
      }
    },
    "responseModel": {
      "type": "object",
      "required": [
        "query",
        "status",
        "version"
      ],
      "properties": {
        "query": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "GraphDescription": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphEdge"
          }
        },
        "nodes": {
          "$ref": "#/definitions/GraphNodeDescription"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "GraphMatrix": {
      "type": "object",
      "properties": {
        "Bd": {
          "type": "integer"
        },
        "Bs": {
          "type": "integer"
        },
        "M": {
          "type": "integer"
        },
        "N": {
          "type": "integer"
        },
        "NNZ": {
          "type": "integer"
        }
      },
      "required": [
        "Bd",
        "Bs",
        "M",
        "N",
        "NNZ"
      ]
    },
    "GraphEdge": {
      "type": "object",
      "properties": {
        "source": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "matrix": {
          "$ref": "#/definitions/GraphMatrix"
        },
        "name": {
          "type": "string"
        },
        "symmetric": {
          "type": "boolean"
        }
      }
    },
    "GraphNodeDescription": {
      "type": "object",
      "properties": {
        "#-nodes": {
          "type": "integer"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "databases": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "size": {
                "type": "integer"
              }
            }
          }
        },
        "fieldnames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowResponse": {
      "type": "object",
      "properties": {
        "response-time": {
          "type": "number"
        },
        "#-found-nodes": {
          "type": "integer"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowResponseNode"
          }
        }
      }
    },
    "WorkflowResponseNode": {
      "type": "object",
      "properties": {
        "_categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_db": {
          "type": "string"
        },
        "_hash": {
          "type": "string"
        },
        "_synonyms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index": {
          "type": "integer"
        },
        "weight": {
          "type": "number"
        }
      }
    }
  }
}
