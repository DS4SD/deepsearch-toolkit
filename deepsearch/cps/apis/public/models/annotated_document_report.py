# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class AnnotatedDocumentReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document': 'ProjectProjKeyAnnotateDocumentReportDocument',
        'document_annotation_parameters': 'object',
        'document_conversion_parameters': 'object',
        'report': 'ProjectProjKeyAnnotateDocumentReportReport'
    }

    attribute_map = {
        'document': 'document',
        'document_annotation_parameters': 'document_annotation_parameters',
        'document_conversion_parameters': 'document_conversion_parameters',
        'report': 'report'
    }

    def __init__(self, document=None, document_annotation_parameters=None, document_conversion_parameters=None, report=None, local_vars_configuration=None):  # noqa: E501
        """AnnotatedDocumentReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document = None
        self._document_annotation_parameters = None
        self._document_conversion_parameters = None
        self._report = None
        self.discriminator = None

        self.document = document
        if document_annotation_parameters is not None:
            self.document_annotation_parameters = document_annotation_parameters
        if document_conversion_parameters is not None:
            self.document_conversion_parameters = document_conversion_parameters
        self.report = report

    @property
    def document(self):
        """Gets the document of this AnnotatedDocumentReport.  # noqa: E501


        :return: The document of this AnnotatedDocumentReport.  # noqa: E501
        :rtype: ProjectProjKeyAnnotateDocumentReportDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AnnotatedDocumentReport.


        :param document: The document of this AnnotatedDocumentReport.  # noqa: E501
        :type: ProjectProjKeyAnnotateDocumentReportDocument
        """
        if self.local_vars_configuration.client_side_validation and document is None:  # noqa: E501
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def document_annotation_parameters(self):
        """Gets the document_annotation_parameters of this AnnotatedDocumentReport.  # noqa: E501


        :return: The document_annotation_parameters of this AnnotatedDocumentReport.  # noqa: E501
        :rtype: object
        """
        return self._document_annotation_parameters

    @document_annotation_parameters.setter
    def document_annotation_parameters(self, document_annotation_parameters):
        """Sets the document_annotation_parameters of this AnnotatedDocumentReport.


        :param document_annotation_parameters: The document_annotation_parameters of this AnnotatedDocumentReport.  # noqa: E501
        :type: object
        """

        self._document_annotation_parameters = document_annotation_parameters

    @property
    def document_conversion_parameters(self):
        """Gets the document_conversion_parameters of this AnnotatedDocumentReport.  # noqa: E501


        :return: The document_conversion_parameters of this AnnotatedDocumentReport.  # noqa: E501
        :rtype: object
        """
        return self._document_conversion_parameters

    @document_conversion_parameters.setter
    def document_conversion_parameters(self, document_conversion_parameters):
        """Sets the document_conversion_parameters of this AnnotatedDocumentReport.


        :param document_conversion_parameters: The document_conversion_parameters of this AnnotatedDocumentReport.  # noqa: E501
        :type: object
        """

        self._document_conversion_parameters = document_conversion_parameters

    @property
    def report(self):
        """Gets the report of this AnnotatedDocumentReport.  # noqa: E501


        :return: The report of this AnnotatedDocumentReport.  # noqa: E501
        :rtype: ProjectProjKeyAnnotateDocumentReportReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this AnnotatedDocumentReport.


        :param report: The report of this AnnotatedDocumentReport.  # noqa: E501
        :type: ProjectProjKeyAnnotateDocumentReportReport
        """
        if self.local_vars_configuration.client_side_validation and report is None:  # noqa: E501
            raise ValueError("Invalid value for `report`, must not be `None`")  # noqa: E501

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotatedDocumentReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnotatedDocumentReport):
            return True

        return self.to_dict() != other.to_dict()
