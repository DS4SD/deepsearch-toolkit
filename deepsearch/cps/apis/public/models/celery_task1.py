# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class CeleryTask1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_at': 'float',
        'created_at': 'float',
        'meta': 'dict(str, object)',
        'metrics': 'object',
        'proj_key': 'str',
        'project_task_id': 'str',
        'project_task_type': 'str',
        'started_at': 'float',
        'task_id': 'str',
        'task_status': 'str',
        'task_type': 'str',
        'worker_name': 'str'
    }

    attribute_map = {
        'completed_at': 'completed_at',
        'created_at': 'created_at',
        'meta': 'meta',
        'metrics': 'metrics',
        'proj_key': 'proj_key',
        'project_task_id': 'project_task_id',
        'project_task_type': 'project_task_type',
        'started_at': 'started_at',
        'task_id': 'task_id',
        'task_status': 'task_status',
        'task_type': 'task_type',
        'worker_name': 'worker_name'
    }

    def __init__(self, completed_at=None, created_at=None, meta=None, metrics=None, proj_key=None, project_task_id=None, project_task_type=None, started_at=None, task_id=None, task_status=None, task_type=None, worker_name=None, local_vars_configuration=None):  # noqa: E501
        """CeleryTask1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed_at = None
        self._created_at = None
        self._meta = None
        self._metrics = None
        self._proj_key = None
        self._project_task_id = None
        self._project_task_type = None
        self._started_at = None
        self._task_id = None
        self._task_status = None
        self._task_type = None
        self._worker_name = None
        self.discriminator = None

        self.completed_at = completed_at
        self.created_at = created_at
        self.meta = meta
        if metrics is not None:
            self.metrics = metrics
        self.proj_key = proj_key
        self.project_task_id = project_task_id
        self.project_task_type = project_task_type
        self.started_at = started_at
        self.task_id = task_id
        self.task_status = task_status
        self.task_type = task_type
        self.worker_name = worker_name

    @property
    def completed_at(self):
        """Gets the completed_at of this CeleryTask1.  # noqa: E501


        :return: The completed_at of this CeleryTask1.  # noqa: E501
        :rtype: float
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CeleryTask1.


        :param completed_at: The completed_at of this CeleryTask1.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and completed_at is None:  # noqa: E501
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this CeleryTask1.  # noqa: E501


        :return: The created_at of this CeleryTask1.  # noqa: E501
        :rtype: float
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CeleryTask1.


        :param created_at: The created_at of this CeleryTask1.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def meta(self):
        """Gets the meta of this CeleryTask1.  # noqa: E501


        :return: The meta of this CeleryTask1.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this CeleryTask1.


        :param meta: The meta of this CeleryTask1.  # noqa: E501
        :type: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and meta is None:  # noqa: E501
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def metrics(self):
        """Gets the metrics of this CeleryTask1.  # noqa: E501


        :return: The metrics of this CeleryTask1.  # noqa: E501
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this CeleryTask1.


        :param metrics: The metrics of this CeleryTask1.  # noqa: E501
        :type: object
        """

        self._metrics = metrics

    @property
    def proj_key(self):
        """Gets the proj_key of this CeleryTask1.  # noqa: E501


        :return: The proj_key of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._proj_key

    @proj_key.setter
    def proj_key(self, proj_key):
        """Sets the proj_key of this CeleryTask1.


        :param proj_key: The proj_key of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and proj_key is None:  # noqa: E501
            raise ValueError("Invalid value for `proj_key`, must not be `None`")  # noqa: E501

        self._proj_key = proj_key

    @property
    def project_task_id(self):
        """Gets the project_task_id of this CeleryTask1.  # noqa: E501


        :return: The project_task_id of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._project_task_id

    @project_task_id.setter
    def project_task_id(self, project_task_id):
        """Sets the project_task_id of this CeleryTask1.


        :param project_task_id: The project_task_id of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_task_id`, must not be `None`")  # noqa: E501

        self._project_task_id = project_task_id

    @property
    def project_task_type(self):
        """Gets the project_task_type of this CeleryTask1.  # noqa: E501


        :return: The project_task_type of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._project_task_type

    @project_task_type.setter
    def project_task_type(self, project_task_type):
        """Sets the project_task_type of this CeleryTask1.


        :param project_task_type: The project_task_type of this CeleryTask1.  # noqa: E501
        :type: str
        """

        self._project_task_type = project_task_type

    @property
    def started_at(self):
        """Gets the started_at of this CeleryTask1.  # noqa: E501


        :return: The started_at of this CeleryTask1.  # noqa: E501
        :rtype: float
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CeleryTask1.


        :param started_at: The started_at of this CeleryTask1.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def task_id(self):
        """Gets the task_id of this CeleryTask1.  # noqa: E501


        :return: The task_id of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CeleryTask1.


        :param task_id: The task_id of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def task_status(self):
        """Gets the task_status of this CeleryTask1.  # noqa: E501


        :return: The task_status of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this CeleryTask1.


        :param task_status: The task_status of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_status is None:  # noqa: E501
            raise ValueError("Invalid value for `task_status`, must not be `None`")  # noqa: E501

        self._task_status = task_status

    @property
    def task_type(self):
        """Gets the task_type of this CeleryTask1.  # noqa: E501


        :return: The task_type of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CeleryTask1.


        :param task_type: The task_type of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def worker_name(self):
        """Gets the worker_name of this CeleryTask1.  # noqa: E501


        :return: The worker_name of this CeleryTask1.  # noqa: E501
        :rtype: str
        """
        return self._worker_name

    @worker_name.setter
    def worker_name(self, worker_name):
        """Sets the worker_name of this CeleryTask1.


        :param worker_name: The worker_name of this CeleryTask1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and worker_name is None:  # noqa: E501
            raise ValueError("Invalid value for `worker_name`, must not be `None`")  # noqa: E501

        self._worker_name = worker_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CeleryTask1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CeleryTask1):
            return True

        return self.to_dict() != other.to_dict()
