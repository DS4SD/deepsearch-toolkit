# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class DataCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'documents': 'float',
        'health': 'str',
        'metadata': 'DataCollectionMetadata',
        'name': 'str',
        'source': 'DataCollectionSource',
        'status': 'str'
    }

    attribute_map = {
        'documents': 'documents',
        'health': 'health',
        'metadata': 'metadata',
        'name': 'name',
        'source': 'source',
        'status': 'status'
    }

    def __init__(self, documents=None, health=None, metadata=None, name=None, source=None, status=None, local_vars_configuration=None):  # noqa: E501
        """DataCollection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._documents = None
        self._health = None
        self._metadata = None
        self._name = None
        self._source = None
        self._status = None
        self.discriminator = None

        self.documents = documents
        self.health = health
        self.metadata = metadata
        self.name = name
        if source is not None:
            self.source = source
        self.status = status

    @property
    def documents(self):
        """Gets the documents of this DataCollection.  # noqa: E501


        :return: The documents of this DataCollection.  # noqa: E501
        :rtype: float
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DataCollection.


        :param documents: The documents of this DataCollection.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and documents is None:  # noqa: E501
            raise ValueError("Invalid value for `documents`, must not be `None`")  # noqa: E501

        self._documents = documents

    @property
    def health(self):
        """Gets the health of this DataCollection.  # noqa: E501


        :return: The health of this DataCollection.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this DataCollection.


        :param health: The health of this DataCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and health is None:  # noqa: E501
            raise ValueError("Invalid value for `health`, must not be `None`")  # noqa: E501

        self._health = health

    @property
    def metadata(self):
        """Gets the metadata of this DataCollection.  # noqa: E501


        :return: The metadata of this DataCollection.  # noqa: E501
        :rtype: DataCollectionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataCollection.


        :param metadata: The metadata of this DataCollection.  # noqa: E501
        :type: DataCollectionMetadata
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this DataCollection.  # noqa: E501


        :return: The name of this DataCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataCollection.


        :param name: The name of this DataCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this DataCollection.  # noqa: E501


        :return: The source of this DataCollection.  # noqa: E501
        :rtype: DataCollectionSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DataCollection.


        :param source: The source of this DataCollection.  # noqa: E501
        :type: DataCollectionSource
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this DataCollection.  # noqa: E501


        :return: The status of this DataCollection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataCollection.


        :param status: The status of this DataCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCollection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataCollection):
            return True

        return self.to_dict() != other.to_dict()
