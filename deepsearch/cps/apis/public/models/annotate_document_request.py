# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class AnnotateDocumentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document': 'object',
        'image_annotators': 'list[AnnotatorParametersOrRef]',
        'table_annotators': 'list[AnnotatorParametersOrRef]',
        'text_annotators': 'list[AnnotatorParametersOrRef]',
        'use_cache': 'bool'
    }

    attribute_map = {
        'document': 'document',
        'image_annotators': 'image_annotators',
        'table_annotators': 'table_annotators',
        'text_annotators': 'text_annotators',
        'use_cache': 'use_cache'
    }

    def __init__(self, document=None, image_annotators=None, table_annotators=None, text_annotators=None, use_cache=True, local_vars_configuration=None):  # noqa: E501
        """AnnotateDocumentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document = None
        self._image_annotators = None
        self._table_annotators = None
        self._text_annotators = None
        self._use_cache = None
        self.discriminator = None

        self.document = document
        self.image_annotators = image_annotators
        self.table_annotators = table_annotators
        self.text_annotators = text_annotators
        if use_cache is not None:
            self.use_cache = use_cache

    @property
    def document(self):
        """Gets the document of this AnnotateDocumentRequest.  # noqa: E501


        :return: The document of this AnnotateDocumentRequest.  # noqa: E501
        :rtype: object
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AnnotateDocumentRequest.


        :param document: The document of this AnnotateDocumentRequest.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and document is None:  # noqa: E501
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def image_annotators(self):
        """Gets the image_annotators of this AnnotateDocumentRequest.  # noqa: E501


        :return: The image_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :rtype: list[AnnotatorParametersOrRef]
        """
        return self._image_annotators

    @image_annotators.setter
    def image_annotators(self, image_annotators):
        """Sets the image_annotators of this AnnotateDocumentRequest.


        :param image_annotators: The image_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :type: list[AnnotatorParametersOrRef]
        """
        if self.local_vars_configuration.client_side_validation and image_annotators is None:  # noqa: E501
            raise ValueError("Invalid value for `image_annotators`, must not be `None`")  # noqa: E501

        self._image_annotators = image_annotators

    @property
    def table_annotators(self):
        """Gets the table_annotators of this AnnotateDocumentRequest.  # noqa: E501


        :return: The table_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :rtype: list[AnnotatorParametersOrRef]
        """
        return self._table_annotators

    @table_annotators.setter
    def table_annotators(self, table_annotators):
        """Sets the table_annotators of this AnnotateDocumentRequest.


        :param table_annotators: The table_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :type: list[AnnotatorParametersOrRef]
        """
        if self.local_vars_configuration.client_side_validation and table_annotators is None:  # noqa: E501
            raise ValueError("Invalid value for `table_annotators`, must not be `None`")  # noqa: E501

        self._table_annotators = table_annotators

    @property
    def text_annotators(self):
        """Gets the text_annotators of this AnnotateDocumentRequest.  # noqa: E501


        :return: The text_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :rtype: list[AnnotatorParametersOrRef]
        """
        return self._text_annotators

    @text_annotators.setter
    def text_annotators(self, text_annotators):
        """Sets the text_annotators of this AnnotateDocumentRequest.


        :param text_annotators: The text_annotators of this AnnotateDocumentRequest.  # noqa: E501
        :type: list[AnnotatorParametersOrRef]
        """
        if self.local_vars_configuration.client_side_validation and text_annotators is None:  # noqa: E501
            raise ValueError("Invalid value for `text_annotators`, must not be `None`")  # noqa: E501

        self._text_annotators = text_annotators

    @property
    def use_cache(self):
        """Gets the use_cache of this AnnotateDocumentRequest.  # noqa: E501


        :return: The use_cache of this AnnotateDocumentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_cache

    @use_cache.setter
    def use_cache(self, use_cache):
        """Sets the use_cache of this AnnotateDocumentRequest.


        :param use_cache: The use_cache of this AnnotateDocumentRequest.  # noqa: E501
        :type: bool
        """

        self._use_cache = use_cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotateDocumentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnotateDocumentRequest):
            return True

        return self.to_dict() != other.to_dict()
