# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class DataFlow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'float',
        'description': 'str',
        'df_tpl_key': 'str',
        'name': 'str',
        'proj_key': 'str',
        'public': 'bool',
        'template': 'object',
        'updated_at': 'float',
        'variables': 'dict(str, object)'
    }

    attribute_map = {
        'created_at': 'created_at',
        'description': 'description',
        'df_tpl_key': 'df_tpl_key',
        'name': 'name',
        'proj_key': 'proj_key',
        'public': 'public',
        'template': 'template',
        'updated_at': 'updated_at',
        'variables': 'variables'
    }

    def __init__(self, created_at=None, description=None, df_tpl_key=None, name=None, proj_key=None, public=None, template=None, updated_at=None, variables=None, local_vars_configuration=None):  # noqa: E501
        """DataFlow - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._description = None
        self._df_tpl_key = None
        self._name = None
        self._proj_key = None
        self._public = None
        self._template = None
        self._updated_at = None
        self._variables = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if df_tpl_key is not None:
            self.df_tpl_key = df_tpl_key
        if name is not None:
            self.name = name
        if proj_key is not None:
            self.proj_key = proj_key
        if public is not None:
            self.public = public
        if template is not None:
            self.template = template
        if updated_at is not None:
            self.updated_at = updated_at
        if variables is not None:
            self.variables = variables

    @property
    def created_at(self):
        """Gets the created_at of this DataFlow.  # noqa: E501


        :return: The created_at of this DataFlow.  # noqa: E501
        :rtype: float
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataFlow.


        :param created_at: The created_at of this DataFlow.  # noqa: E501
        :type: float
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this DataFlow.  # noqa: E501


        :return: The description of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataFlow.


        :param description: The description of this DataFlow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def df_tpl_key(self):
        """Gets the df_tpl_key of this DataFlow.  # noqa: E501


        :return: The df_tpl_key of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._df_tpl_key

    @df_tpl_key.setter
    def df_tpl_key(self, df_tpl_key):
        """Sets the df_tpl_key of this DataFlow.


        :param df_tpl_key: The df_tpl_key of this DataFlow.  # noqa: E501
        :type: str
        """

        self._df_tpl_key = df_tpl_key

    @property
    def name(self):
        """Gets the name of this DataFlow.  # noqa: E501


        :return: The name of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataFlow.


        :param name: The name of this DataFlow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def proj_key(self):
        """Gets the proj_key of this DataFlow.  # noqa: E501


        :return: The proj_key of this DataFlow.  # noqa: E501
        :rtype: str
        """
        return self._proj_key

    @proj_key.setter
    def proj_key(self, proj_key):
        """Sets the proj_key of this DataFlow.


        :param proj_key: The proj_key of this DataFlow.  # noqa: E501
        :type: str
        """

        self._proj_key = proj_key

    @property
    def public(self):
        """Gets the public of this DataFlow.  # noqa: E501


        :return: The public of this DataFlow.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this DataFlow.


        :param public: The public of this DataFlow.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def template(self):
        """Gets the template of this DataFlow.  # noqa: E501


        :return: The template of this DataFlow.  # noqa: E501
        :rtype: object
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DataFlow.


        :param template: The template of this DataFlow.  # noqa: E501
        :type: object
        """

        self._template = template

    @property
    def updated_at(self):
        """Gets the updated_at of this DataFlow.  # noqa: E501


        :return: The updated_at of this DataFlow.  # noqa: E501
        :rtype: float
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataFlow.


        :param updated_at: The updated_at of this DataFlow.  # noqa: E501
        :type: float
        """

        self._updated_at = updated_at

    @property
    def variables(self):
        """Gets the variables of this DataFlow.  # noqa: E501


        :return: The variables of this DataFlow.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this DataFlow.


        :param variables: The variables of this DataFlow.  # noqa: E501
        :type: dict(str, object)
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFlow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataFlow):
            return True

        return self.to_dict() != other.to_dict()
