# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class ProjectProjKeyBagsBagKeyTasksExportDatasetInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection_key': 'str',
        'coords': 'ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords',
        'include_s3_data': 'bool',
        'node_list': 'list[ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList]',
        'projection': 'object'
    }

    attribute_map = {
        'collection_key': 'collection_key',
        'coords': 'coords',
        'include_s3_data': 'include_s3_data',
        'node_list': 'node_list',
        'projection': 'projection'
    }

    def __init__(self, collection_key=None, coords=None, include_s3_data=False, node_list=None, projection=None, local_vars_configuration=None):  # noqa: E501
        """ProjectProjKeyBagsBagKeyTasksExportDatasetInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._collection_key = None
        self._coords = None
        self._include_s3_data = None
        self._node_list = None
        self._projection = None
        self.discriminator = None

        if collection_key is not None:
            self.collection_key = collection_key
        self.coords = coords
        if include_s3_data is not None:
            self.include_s3_data = include_s3_data
        if node_list is not None:
            self.node_list = node_list
        if projection is not None:
            self.projection = projection

    @property
    def collection_key(self):
        """Gets the collection_key of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501


        :return: The collection_key of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :rtype: str
        """
        return self._collection_key

    @collection_key.setter
    def collection_key(self, collection_key):
        """Sets the collection_key of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.


        :param collection_key: The collection_key of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :type: str
        """

        self._collection_key = collection_key

    @property
    def coords(self):
        """Gets the coords of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501


        :return: The coords of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :rtype: ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.


        :param coords: The coords of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :type: ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoords
        """
        if self.local_vars_configuration.client_side_validation and coords is None:  # noqa: E501
            raise ValueError("Invalid value for `coords`, must not be `None`")  # noqa: E501

        self._coords = coords

    @property
    def include_s3_data(self):
        """Gets the include_s3_data of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501


        :return: The include_s3_data of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :rtype: bool
        """
        return self._include_s3_data

    @include_s3_data.setter
    def include_s3_data(self, include_s3_data):
        """Sets the include_s3_data of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.


        :param include_s3_data: The include_s3_data of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :type: bool
        """

        self._include_s3_data = include_s3_data

    @property
    def node_list(self):
        """Gets the node_list of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501


        :return: The node_list of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :rtype: list[ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList]
        """
        return self._node_list

    @node_list.setter
    def node_list(self, node_list):
        """Sets the node_list of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.


        :param node_list: The node_list of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :type: list[ProjectProjKeyBagsBagKeyTasksExportDatasetInfoNodeList]
        """

        self._node_list = node_list

    @property
    def projection(self):
        """Gets the projection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501

        A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}).  # noqa: E501

        :return: The projection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :rtype: object
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.

        A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}).  # noqa: E501

        :param projection: The projection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfo.  # noqa: E501
        :type: object
        """

        self._projection = projection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectProjKeyBagsBagKeyTasksExportDatasetInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectProjKeyBagsBagKeyTasksExportDatasetInfo):
            return True

        return self.to_dict() != other.to_dict()
