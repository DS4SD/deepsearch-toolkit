# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class ProjectDataIndexWithStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_date': 'str',
        'description': 'str',
        'documents': 'float',
        'health': 'str',
        'name': 'str',
        'record_properties': 'object',
        'schema_key': 'str',
        'source': 'ProjectDataIndexSource',
        'status': 'str',
        'type': 'str',
        'view_of': 'ProjectDataIndexWithStatusViewOf'
    }

    attribute_map = {
        'creation_date': 'creation_date',
        'description': 'description',
        'documents': 'documents',
        'health': 'health',
        'name': 'name',
        'record_properties': 'record_properties',
        'schema_key': 'schema_key',
        'source': 'source',
        'status': 'status',
        'type': 'type',
        'view_of': 'view_of'
    }

    def __init__(self, creation_date=None, description=None, documents=None, health=None, name=None, record_properties=None, schema_key=None, source=None, status=None, type=None, view_of=None, local_vars_configuration=None):  # noqa: E501
        """ProjectDataIndexWithStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creation_date = None
        self._description = None
        self._documents = None
        self._health = None
        self._name = None
        self._record_properties = None
        self._schema_key = None
        self._source = None
        self._status = None
        self._type = None
        self._view_of = None
        self.discriminator = None

        self.creation_date = creation_date
        self.description = description
        self.documents = documents
        self.health = health
        self.name = name
        if record_properties is not None:
            self.record_properties = record_properties
        if schema_key is not None:
            self.schema_key = schema_key
        self.source = source
        self.status = status
        self.type = type
        if view_of is not None:
            self.view_of = view_of

    @property
    def creation_date(self):
        """Gets the creation_date of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The creation_date of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProjectDataIndexWithStatus.


        :param creation_date: The creation_date of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The description of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectDataIndexWithStatus.


        :param description: The description of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def documents(self):
        """Gets the documents of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The documents of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: float
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ProjectDataIndexWithStatus.


        :param documents: The documents of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and documents is None:  # noqa: E501
            raise ValueError("Invalid value for `documents`, must not be `None`")  # noqa: E501

        self._documents = documents

    @property
    def health(self):
        """Gets the health of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The health of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ProjectDataIndexWithStatus.


        :param health: The health of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and health is None:  # noqa: E501
            raise ValueError("Invalid value for `health`, must not be `None`")  # noqa: E501

        self._health = health

    @property
    def name(self):
        """Gets the name of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The name of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDataIndexWithStatus.


        :param name: The name of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def record_properties(self):
        """Gets the record_properties of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The record_properties of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: object
        """
        return self._record_properties

    @record_properties.setter
    def record_properties(self, record_properties):
        """Sets the record_properties of this ProjectDataIndexWithStatus.


        :param record_properties: The record_properties of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: object
        """

        self._record_properties = record_properties

    @property
    def schema_key(self):
        """Gets the schema_key of this ProjectDataIndexWithStatus.  # noqa: E501

        Index's schema key  # noqa: E501

        :return: The schema_key of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._schema_key

    @schema_key.setter
    def schema_key(self, schema_key):
        """Sets the schema_key of this ProjectDataIndexWithStatus.

        Index's schema key  # noqa: E501

        :param schema_key: The schema_key of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["deepsearch-doc", "deepsearch-db", "generic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and schema_key not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `schema_key` ({0}), must be one of {1}"  # noqa: E501
                .format(schema_key, allowed_values)
            )

        self._schema_key = schema_key

    @property
    def source(self):
        """Gets the source of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The source of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: ProjectDataIndexSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ProjectDataIndexWithStatus.


        :param source: The source of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: ProjectDataIndexSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def status(self):
        """Gets the status of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The status of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectDataIndexWithStatus.


        :param status: The status of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this ProjectDataIndexWithStatus.  # noqa: E501

        Index type, user friendly format  # noqa: E501

        :return: The type of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectDataIndexWithStatus.

        Index type, user friendly format  # noqa: E501

        :param type: The type of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["View", "Document", "DB Record", "Generic", "Experiment"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def view_of(self):
        """Gets the view_of of this ProjectDataIndexWithStatus.  # noqa: E501


        :return: The view_of of this ProjectDataIndexWithStatus.  # noqa: E501
        :rtype: ProjectDataIndexWithStatusViewOf
        """
        return self._view_of

    @view_of.setter
    def view_of(self, view_of):
        """Sets the view_of of this ProjectDataIndexWithStatus.


        :param view_of: The view_of of this ProjectDataIndexWithStatus.  # noqa: E501
        :type: ProjectDataIndexWithStatusViewOf
        """

        self._view_of = view_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDataIndexWithStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectDataIndexWithStatus):
            return True

        return self.to_dict() != other.to_dict()
