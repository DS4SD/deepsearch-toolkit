# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class BagKgLegacyApiBackend(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'svc_endpoint': 'str',
        'bag_domain': 'str',
        'bag_url': 'str',
        'flavour': 'str',
        'token': 'str'
    }

    attribute_map = {
        'svc_endpoint': '_svc_endpoint',
        'bag_domain': 'bag_domain',
        'bag_url': 'bag_url',
        'flavour': 'flavour',
        'token': 'token'
    }

    def __init__(self, svc_endpoint=None, bag_domain=None, bag_url=None, flavour=None, token=None, local_vars_configuration=None):  # noqa: E501
        """BagKgLegacyApiBackend - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._svc_endpoint = None
        self._bag_domain = None
        self._bag_url = None
        self._flavour = None
        self._token = None
        self.discriminator = None

        if svc_endpoint is not None:
            self.svc_endpoint = svc_endpoint
        if bag_domain is not None:
            self.bag_domain = bag_domain
        if bag_url is not None:
            self.bag_url = bag_url
        if flavour is not None:
            self.flavour = flavour
        if token is not None:
            self.token = token

    @property
    def svc_endpoint(self):
        """Gets the svc_endpoint of this BagKgLegacyApiBackend.  # noqa: E501


        :return: The svc_endpoint of this BagKgLegacyApiBackend.  # noqa: E501
        :rtype: str
        """
        return self._svc_endpoint

    @svc_endpoint.setter
    def svc_endpoint(self, svc_endpoint):
        """Sets the svc_endpoint of this BagKgLegacyApiBackend.


        :param svc_endpoint: The svc_endpoint of this BagKgLegacyApiBackend.  # noqa: E501
        :type: str
        """

        self._svc_endpoint = svc_endpoint

    @property
    def bag_domain(self):
        """Gets the bag_domain of this BagKgLegacyApiBackend.  # noqa: E501


        :return: The bag_domain of this BagKgLegacyApiBackend.  # noqa: E501
        :rtype: str
        """
        return self._bag_domain

    @bag_domain.setter
    def bag_domain(self, bag_domain):
        """Sets the bag_domain of this BagKgLegacyApiBackend.


        :param bag_domain: The bag_domain of this BagKgLegacyApiBackend.  # noqa: E501
        :type: str
        """

        self._bag_domain = bag_domain

    @property
    def bag_url(self):
        """Gets the bag_url of this BagKgLegacyApiBackend.  # noqa: E501


        :return: The bag_url of this BagKgLegacyApiBackend.  # noqa: E501
        :rtype: str
        """
        return self._bag_url

    @bag_url.setter
    def bag_url(self, bag_url):
        """Sets the bag_url of this BagKgLegacyApiBackend.


        :param bag_url: The bag_url of this BagKgLegacyApiBackend.  # noqa: E501
        :type: str
        """

        self._bag_url = bag_url

    @property
    def flavour(self):
        """Gets the flavour of this BagKgLegacyApiBackend.  # noqa: E501


        :return: The flavour of this BagKgLegacyApiBackend.  # noqa: E501
        :rtype: str
        """
        return self._flavour

    @flavour.setter
    def flavour(self, flavour):
        """Sets the flavour of this BagKgLegacyApiBackend.


        :param flavour: The flavour of this BagKgLegacyApiBackend.  # noqa: E501
        :type: str
        """

        self._flavour = flavour

    @property
    def token(self):
        """Gets the token of this BagKgLegacyApiBackend.  # noqa: E501


        :return: The token of this BagKgLegacyApiBackend.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BagKgLegacyApiBackend.


        :param token: The token of this BagKgLegacyApiBackend.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BagKgLegacyApiBackend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BagKgLegacyApiBackend):
            return True

        return self.to_dict() != other.to_dict()
