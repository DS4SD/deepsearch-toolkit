# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class KibanaSavedQueriesResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'fields': 'list[str]',
        'query': 'str',
        'title': 'str'
    }

    attribute_map = {
        'description': 'description',
        'fields': 'fields',
        'query': 'query',
        'title': 'title'
    }

    def __init__(self, description=None, fields=None, query=None, title=None, local_vars_configuration=None):  # noqa: E501
        """KibanaSavedQueriesResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._fields = None
        self._query = None
        self._title = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if fields is not None:
            self.fields = fields
        if query is not None:
            self.query = query
        if title is not None:
            self.title = title

    @property
    def description(self):
        """Gets the description of this KibanaSavedQueriesResult.  # noqa: E501


        :return: The description of this KibanaSavedQueriesResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KibanaSavedQueriesResult.


        :param description: The description of this KibanaSavedQueriesResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this KibanaSavedQueriesResult.  # noqa: E501


        :return: The fields of this KibanaSavedQueriesResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this KibanaSavedQueriesResult.


        :param fields: The fields of this KibanaSavedQueriesResult.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def query(self):
        """Gets the query of this KibanaSavedQueriesResult.  # noqa: E501


        :return: The query of this KibanaSavedQueriesResult.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this KibanaSavedQueriesResult.


        :param query: The query of this KibanaSavedQueriesResult.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def title(self):
        """Gets the title of this KibanaSavedQueriesResult.  # noqa: E501


        :return: The title of this KibanaSavedQueriesResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this KibanaSavedQueriesResult.


        :param title: The title of this KibanaSavedQueriesResult.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KibanaSavedQueriesResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KibanaSavedQueriesResult):
            return True

        return self.to_dict() != other.to_dict()
