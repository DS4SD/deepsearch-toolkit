# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class TemporaryUploadFileResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'download': 'TemporaryUploadFileResultDownload',
        'download_private': 'TemporaryUploadFileResultDownloadPrivate',
        'id': 'str',
        'metadata': 'TemporaryUploadFileResultMetadata',
        'metadata_private': 'TemporaryUploadFileResultMetadataPrivate',
        'upload': 'TemporaryUploadFileResultUpload',
        'upload_private': 'TemporaryUploadFileResultUploadPrivate'
    }

    attribute_map = {
        'download': 'download',
        'download_private': 'download_private',
        'id': 'id',
        'metadata': 'metadata',
        'metadata_private': 'metadata_private',
        'upload': 'upload',
        'upload_private': 'upload_private'
    }

    def __init__(self, download=None, download_private=None, id=None, metadata=None, metadata_private=None, upload=None, upload_private=None, local_vars_configuration=None):  # noqa: E501
        """TemporaryUploadFileResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._download = None
        self._download_private = None
        self._id = None
        self._metadata = None
        self._metadata_private = None
        self._upload = None
        self._upload_private = None
        self.discriminator = None

        self.download = download
        self.download_private = download_private
        self.id = id
        self.metadata = metadata
        self.metadata_private = metadata_private
        self.upload = upload
        self.upload_private = upload_private

    @property
    def download(self):
        """Gets the download of this TemporaryUploadFileResult.  # noqa: E501


        :return: The download of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultDownload
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this TemporaryUploadFileResult.


        :param download: The download of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultDownload
        """
        if self.local_vars_configuration.client_side_validation and download is None:  # noqa: E501
            raise ValueError("Invalid value for `download`, must not be `None`")  # noqa: E501

        self._download = download

    @property
    def download_private(self):
        """Gets the download_private of this TemporaryUploadFileResult.  # noqa: E501


        :return: The download_private of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultDownloadPrivate
        """
        return self._download_private

    @download_private.setter
    def download_private(self, download_private):
        """Sets the download_private of this TemporaryUploadFileResult.


        :param download_private: The download_private of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultDownloadPrivate
        """
        if self.local_vars_configuration.client_side_validation and download_private is None:  # noqa: E501
            raise ValueError("Invalid value for `download_private`, must not be `None`")  # noqa: E501

        self._download_private = download_private

    @property
    def id(self):
        """Gets the id of this TemporaryUploadFileResult.  # noqa: E501

        ID of the temporary file.  # noqa: E501

        :return: The id of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemporaryUploadFileResult.

        ID of the temporary file.  # noqa: E501

        :param id: The id of this TemporaryUploadFileResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this TemporaryUploadFileResult.  # noqa: E501


        :return: The metadata of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TemporaryUploadFileResult.


        :param metadata: The metadata of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultMetadata
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def metadata_private(self):
        """Gets the metadata_private of this TemporaryUploadFileResult.  # noqa: E501


        :return: The metadata_private of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultMetadataPrivate
        """
        return self._metadata_private

    @metadata_private.setter
    def metadata_private(self, metadata_private):
        """Sets the metadata_private of this TemporaryUploadFileResult.


        :param metadata_private: The metadata_private of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultMetadataPrivate
        """
        if self.local_vars_configuration.client_side_validation and metadata_private is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata_private`, must not be `None`")  # noqa: E501

        self._metadata_private = metadata_private

    @property
    def upload(self):
        """Gets the upload of this TemporaryUploadFileResult.  # noqa: E501


        :return: The upload of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultUpload
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this TemporaryUploadFileResult.


        :param upload: The upload of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultUpload
        """
        if self.local_vars_configuration.client_side_validation and upload is None:  # noqa: E501
            raise ValueError("Invalid value for `upload`, must not be `None`")  # noqa: E501

        self._upload = upload

    @property
    def upload_private(self):
        """Gets the upload_private of this TemporaryUploadFileResult.  # noqa: E501


        :return: The upload_private of this TemporaryUploadFileResult.  # noqa: E501
        :rtype: TemporaryUploadFileResultUploadPrivate
        """
        return self._upload_private

    @upload_private.setter
    def upload_private(self, upload_private):
        """Sets the upload_private of this TemporaryUploadFileResult.


        :param upload_private: The upload_private of this TemporaryUploadFileResult.  # noqa: E501
        :type: TemporaryUploadFileResultUploadPrivate
        """
        if self.local_vars_configuration.client_side_validation and upload_private is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_private`, must not be `None`")  # noqa: E501

        self._upload_private = upload_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemporaryUploadFileResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemporaryUploadFileResult):
            return True

        return self.to_dict() != other.to_dict()
