# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class DataFlowAssembleReportOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_log_level': 'str',
        'max_errors': 'int'
    }

    attribute_map = {
        'event_log_level': 'event_log_level',
        'max_errors': 'max_errors'
    }

    def __init__(self, event_log_level='error', max_errors=None, local_vars_configuration=None):  # noqa: E501
        """DataFlowAssembleReportOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_log_level = None
        self._max_errors = None
        self.discriminator = None

        if event_log_level is not None:
            self.event_log_level = event_log_level
        if max_errors is not None:
            self.max_errors = max_errors

    @property
    def event_log_level(self):
        """Gets the event_log_level of this DataFlowAssembleReportOptions.  # noqa: E501


        :return: The event_log_level of this DataFlowAssembleReportOptions.  # noqa: E501
        :rtype: str
        """
        return self._event_log_level

    @event_log_level.setter
    def event_log_level(self, event_log_level):
        """Sets the event_log_level of this DataFlowAssembleReportOptions.


        :param event_log_level: The event_log_level of this DataFlowAssembleReportOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["debug", "info", "warning", "error", "critical"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event_log_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(event_log_level, allowed_values)
            )

        self._event_log_level = event_log_level

    @property
    def max_errors(self):
        """Gets the max_errors of this DataFlowAssembleReportOptions.  # noqa: E501


        :return: The max_errors of this DataFlowAssembleReportOptions.  # noqa: E501
        :rtype: int
        """
        return self._max_errors

    @max_errors.setter
    def max_errors(self, max_errors):
        """Sets the max_errors of this DataFlowAssembleReportOptions.


        :param max_errors: The max_errors of this DataFlowAssembleReportOptions.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_errors is not None and max_errors > 100):  # noqa: E501
            raise ValueError("Invalid value for `max_errors`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_errors is not None and max_errors < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_errors`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_errors = max_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFlowAssembleReportOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataFlowAssembleReportOptions):
            return True

        return self.to_dict() != other.to_dict()
