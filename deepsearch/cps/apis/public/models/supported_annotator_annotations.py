# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class SupportedAnnotatorAnnotations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entities': 'list[EntityAnnotationDescriptor]',
        'relationships': 'list[RelationshipAnnotationDescriptor]',
        'supported_object_types': 'list[str]'
    }

    attribute_map = {
        'entities': 'entities',
        'relationships': 'relationships',
        'supported_object_types': 'supported_object_types'
    }

    def __init__(self, entities=None, relationships=None, supported_object_types=None, local_vars_configuration=None):  # noqa: E501
        """SupportedAnnotatorAnnotations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entities = None
        self._relationships = None
        self._supported_object_types = None
        self.discriminator = None

        self.entities = entities
        self.relationships = relationships
        if supported_object_types is not None:
            self.supported_object_types = supported_object_types

    @property
    def entities(self):
        """Gets the entities of this SupportedAnnotatorAnnotations.  # noqa: E501


        :return: The entities of this SupportedAnnotatorAnnotations.  # noqa: E501
        :rtype: list[EntityAnnotationDescriptor]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this SupportedAnnotatorAnnotations.


        :param entities: The entities of this SupportedAnnotatorAnnotations.  # noqa: E501
        :type: list[EntityAnnotationDescriptor]
        """
        if self.local_vars_configuration.client_side_validation and entities is None:  # noqa: E501
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    @property
    def relationships(self):
        """Gets the relationships of this SupportedAnnotatorAnnotations.  # noqa: E501


        :return: The relationships of this SupportedAnnotatorAnnotations.  # noqa: E501
        :rtype: list[RelationshipAnnotationDescriptor]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this SupportedAnnotatorAnnotations.


        :param relationships: The relationships of this SupportedAnnotatorAnnotations.  # noqa: E501
        :type: list[RelationshipAnnotationDescriptor]
        """
        if self.local_vars_configuration.client_side_validation and relationships is None:  # noqa: E501
            raise ValueError("Invalid value for `relationships`, must not be `None`")  # noqa: E501

        self._relationships = relationships

    @property
    def supported_object_types(self):
        """Gets the supported_object_types of this SupportedAnnotatorAnnotations.  # noqa: E501


        :return: The supported_object_types of this SupportedAnnotatorAnnotations.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_object_types

    @supported_object_types.setter
    def supported_object_types(self, supported_object_types):
        """Sets the supported_object_types of this SupportedAnnotatorAnnotations.


        :param supported_object_types: The supported_object_types of this SupportedAnnotatorAnnotations.  # noqa: E501
        :type: list[str]
        """

        self._supported_object_types = supported_object_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedAnnotatorAnnotations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupportedAnnotatorAnnotations):
            return True

        return self.to_dict() != other.to_dict()
