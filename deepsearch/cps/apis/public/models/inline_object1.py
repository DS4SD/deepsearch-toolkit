# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class InlineObject1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'str',
        'catalog_document_collections': 'list[CatalogReference]',
        'ccs_document_collections': 'list[CcsCollectionReference]',
        'data_catalogs': 'list[CatalogReference]',
        'entity_mappings': 'dict(str, str)',
        'models': 'list[CpsModelReference]'
    }

    attribute_map = {
        'access_token': 'access_token',
        'catalog_document_collections': 'catalog_document_collections',
        'ccs_document_collections': 'ccs_document_collections',
        'data_catalogs': 'data_catalogs',
        'entity_mappings': 'entity_mappings',
        'models': 'models'
    }

    def __init__(self, access_token=None, catalog_document_collections=None, ccs_document_collections=None, data_catalogs=None, entity_mappings=None, models=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._catalog_document_collections = None
        self._ccs_document_collections = None
        self._data_catalogs = None
        self._entity_mappings = None
        self._models = None
        self.discriminator = None

        self.access_token = access_token
        self.catalog_document_collections = catalog_document_collections
        self.ccs_document_collections = ccs_document_collections
        if data_catalogs is not None:
            self.data_catalogs = data_catalogs
        if entity_mappings is not None:
            self.entity_mappings = entity_mappings
        self.models = models

    @property
    def access_token(self):
        """Gets the access_token of this InlineObject1.  # noqa: E501


        :return: The access_token of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this InlineObject1.


        :param access_token: The access_token of this InlineObject1.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_token is None:  # noqa: E501
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def catalog_document_collections(self):
        """Gets the catalog_document_collections of this InlineObject1.  # noqa: E501


        :return: The catalog_document_collections of this InlineObject1.  # noqa: E501
        :rtype: list[CatalogReference]
        """
        return self._catalog_document_collections

    @catalog_document_collections.setter
    def catalog_document_collections(self, catalog_document_collections):
        """Sets the catalog_document_collections of this InlineObject1.


        :param catalog_document_collections: The catalog_document_collections of this InlineObject1.  # noqa: E501
        :type: list[CatalogReference]
        """
        if self.local_vars_configuration.client_side_validation and catalog_document_collections is None:  # noqa: E501
            raise ValueError("Invalid value for `catalog_document_collections`, must not be `None`")  # noqa: E501

        self._catalog_document_collections = catalog_document_collections

    @property
    def ccs_document_collections(self):
        """Gets the ccs_document_collections of this InlineObject1.  # noqa: E501


        :return: The ccs_document_collections of this InlineObject1.  # noqa: E501
        :rtype: list[CcsCollectionReference]
        """
        return self._ccs_document_collections

    @ccs_document_collections.setter
    def ccs_document_collections(self, ccs_document_collections):
        """Sets the ccs_document_collections of this InlineObject1.


        :param ccs_document_collections: The ccs_document_collections of this InlineObject1.  # noqa: E501
        :type: list[CcsCollectionReference]
        """
        if self.local_vars_configuration.client_side_validation and ccs_document_collections is None:  # noqa: E501
            raise ValueError("Invalid value for `ccs_document_collections`, must not be `None`")  # noqa: E501

        self._ccs_document_collections = ccs_document_collections

    @property
    def data_catalogs(self):
        """Gets the data_catalogs of this InlineObject1.  # noqa: E501


        :return: The data_catalogs of this InlineObject1.  # noqa: E501
        :rtype: list[CatalogReference]
        """
        return self._data_catalogs

    @data_catalogs.setter
    def data_catalogs(self, data_catalogs):
        """Sets the data_catalogs of this InlineObject1.


        :param data_catalogs: The data_catalogs of this InlineObject1.  # noqa: E501
        :type: list[CatalogReference]
        """

        self._data_catalogs = data_catalogs

    @property
    def entity_mappings(self):
        """Gets the entity_mappings of this InlineObject1.  # noqa: E501


        :return: The entity_mappings of this InlineObject1.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_mappings

    @entity_mappings.setter
    def entity_mappings(self, entity_mappings):
        """Sets the entity_mappings of this InlineObject1.


        :param entity_mappings: The entity_mappings of this InlineObject1.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_mappings = entity_mappings

    @property
    def models(self):
        """Gets the models of this InlineObject1.  # noqa: E501


        :return: The models of this InlineObject1.  # noqa: E501
        :rtype: list[CpsModelReference]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this InlineObject1.


        :param models: The models of this InlineObject1.  # noqa: E501
        :type: list[CpsModelReference]
        """
        if self.local_vars_configuration.client_side_validation and models is None:  # noqa: E501
            raise ValueError("Invalid value for `models`, must not be `None`")  # noqa: E501

        self._models = models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject1):
            return True

        return self.to_dict() != other.to_dict()
