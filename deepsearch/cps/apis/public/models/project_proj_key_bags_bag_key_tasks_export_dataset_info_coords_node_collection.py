# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection': 'str',
        'collection_name_prefix': 'str',
        'database': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'collection': 'collection',
        'collection_name_prefix': 'collection_name_prefix',
        'database': 'database',
        'uri': 'uri'
    }

    def __init__(self, collection=None, collection_name_prefix=None, database=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._collection = None
        self._collection_name_prefix = None
        self._database = None
        self._uri = None
        self.discriminator = None

        self.collection = collection
        self.collection_name_prefix = collection_name_prefix
        self.database = database
        self.uri = uri

    @property
    def collection(self):
        """Gets the collection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501


        :return: The collection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.


        :param collection: The collection of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and collection is None:  # noqa: E501
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def collection_name_prefix(self):
        """Gets the collection_name_prefix of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501


        :return: The collection_name_prefix of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :rtype: str
        """
        return self._collection_name_prefix

    @collection_name_prefix.setter
    def collection_name_prefix(self, collection_name_prefix):
        """Sets the collection_name_prefix of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.


        :param collection_name_prefix: The collection_name_prefix of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and collection_name_prefix is None:  # noqa: E501
            raise ValueError("Invalid value for `collection_name_prefix`, must not be `None`")  # noqa: E501

        self._collection_name_prefix = collection_name_prefix

    @property
    def database(self):
        """Gets the database of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501


        :return: The database of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.


        :param database: The database of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and database is None:  # noqa: E501
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501

        self._database = database

    @property
    def uri(self):
        """Gets the uri of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501


        :return: The uri of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.


        :param uri: The uri of this ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uri is None:  # noqa: E501
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectProjKeyBagsBagKeyTasksExportDatasetInfoCoordsNodeCollection):
            return True

        return self.to_dict() != other.to_dict()
