# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class BagFlavourFullData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backend': 'str',
        'config': 'object',
        'default_quota': 'int',
        'description': 'str',
        'display_name': 'str',
        'is_from_deployment': 'bool',
        'name': 'str',
        'order': 'float',
        'project_specific': 'bool'
    }

    attribute_map = {
        'backend': 'backend',
        'config': 'config',
        'default_quota': 'default_quota',
        'description': 'description',
        'display_name': 'display_name',
        'is_from_deployment': 'is_from_deployment',
        'name': 'name',
        'order': 'order',
        'project_specific': 'project_specific'
    }

    def __init__(self, backend=None, config=None, default_quota=None, description=None, display_name=None, is_from_deployment=None, name=None, order=None, project_specific=None, local_vars_configuration=None):  # noqa: E501
        """BagFlavourFullData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backend = None
        self._config = None
        self._default_quota = None
        self._description = None
        self._display_name = None
        self._is_from_deployment = None
        self._name = None
        self._order = None
        self._project_specific = None
        self.discriminator = None

        self.backend = backend
        self.config = config
        if default_quota is not None:
            self.default_quota = default_quota
        self.description = description
        self.display_name = display_name
        if is_from_deployment is not None:
            self.is_from_deployment = is_from_deployment
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        self.project_specific = project_specific

    @property
    def backend(self):
        """Gets the backend of this BagFlavourFullData.  # noqa: E501


        :return: The backend of this BagFlavourFullData.  # noqa: E501
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this BagFlavourFullData.


        :param backend: The backend of this BagFlavourFullData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and backend is None:  # noqa: E501
            raise ValueError("Invalid value for `backend`, must not be `None`")  # noqa: E501

        self._backend = backend

    @property
    def config(self):
        """Gets the config of this BagFlavourFullData.  # noqa: E501


        :return: The config of this BagFlavourFullData.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this BagFlavourFullData.


        :param config: The config of this BagFlavourFullData.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def default_quota(self):
        """Gets the default_quota of this BagFlavourFullData.  # noqa: E501


        :return: The default_quota of this BagFlavourFullData.  # noqa: E501
        :rtype: int
        """
        return self._default_quota

    @default_quota.setter
    def default_quota(self, default_quota):
        """Sets the default_quota of this BagFlavourFullData.


        :param default_quota: The default_quota of this BagFlavourFullData.  # noqa: E501
        :type: int
        """

        self._default_quota = default_quota

    @property
    def description(self):
        """Gets the description of this BagFlavourFullData.  # noqa: E501


        :return: The description of this BagFlavourFullData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BagFlavourFullData.


        :param description: The description of this BagFlavourFullData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this BagFlavourFullData.  # noqa: E501


        :return: The display_name of this BagFlavourFullData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BagFlavourFullData.


        :param display_name: The display_name of this BagFlavourFullData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def is_from_deployment(self):
        """Gets the is_from_deployment of this BagFlavourFullData.  # noqa: E501


        :return: The is_from_deployment of this BagFlavourFullData.  # noqa: E501
        :rtype: bool
        """
        return self._is_from_deployment

    @is_from_deployment.setter
    def is_from_deployment(self, is_from_deployment):
        """Sets the is_from_deployment of this BagFlavourFullData.


        :param is_from_deployment: The is_from_deployment of this BagFlavourFullData.  # noqa: E501
        :type: bool
        """

        self._is_from_deployment = is_from_deployment

    @property
    def name(self):
        """Gets the name of this BagFlavourFullData.  # noqa: E501


        :return: The name of this BagFlavourFullData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BagFlavourFullData.


        :param name: The name of this BagFlavourFullData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this BagFlavourFullData.  # noqa: E501


        :return: The order of this BagFlavourFullData.  # noqa: E501
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this BagFlavourFullData.


        :param order: The order of this BagFlavourFullData.  # noqa: E501
        :type: float
        """

        self._order = order

    @property
    def project_specific(self):
        """Gets the project_specific of this BagFlavourFullData.  # noqa: E501


        :return: The project_specific of this BagFlavourFullData.  # noqa: E501
        :rtype: bool
        """
        return self._project_specific

    @project_specific.setter
    def project_specific(self, project_specific):
        """Sets the project_specific of this BagFlavourFullData.


        :param project_specific: The project_specific of this BagFlavourFullData.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and project_specific is None:  # noqa: E501
            raise ValueError("Invalid value for `project_specific`, must not be `None`")  # noqa: E501

        self._project_specific = project_specific

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BagFlavourFullData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BagFlavourFullData):
            return True

        return self.to_dict() != other.to_dict()
