# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class DataCollectionMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aliases': 'list[str]',
        'created': 'str',
        'description': 'str',
        'domain': 'list[str]',
        'source': 'str',
        'storage': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'aliases': 'aliases',
        'created': 'created',
        'description': 'description',
        'domain': 'domain',
        'source': 'source',
        'storage': 'storage',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, aliases=None, created=None, description=None, domain=None, source=None, storage=None, type=None, version=None, local_vars_configuration=None):  # noqa: E501
        """DataCollectionMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aliases = None
        self._created = None
        self._description = None
        self._domain = None
        self._source = None
        self._storage = None
        self._type = None
        self._version = None
        self.discriminator = None

        self.aliases = aliases
        self.created = created
        self.description = description
        self.domain = domain
        self.source = source
        if storage is not None:
            self.storage = storage
        self.type = type
        self.version = version

    @property
    def aliases(self):
        """Gets the aliases of this DataCollectionMetadata.  # noqa: E501


        :return: The aliases of this DataCollectionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this DataCollectionMetadata.


        :param aliases: The aliases of this DataCollectionMetadata.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and aliases is None:  # noqa: E501
            raise ValueError("Invalid value for `aliases`, must not be `None`")  # noqa: E501

        self._aliases = aliases

    @property
    def created(self):
        """Gets the created of this DataCollectionMetadata.  # noqa: E501


        :return: The created of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DataCollectionMetadata.


        :param created: The created of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self):
        """Gets the description of this DataCollectionMetadata.  # noqa: E501


        :return: The description of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataCollectionMetadata.


        :param description: The description of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this DataCollectionMetadata.  # noqa: E501


        :return: The domain of this DataCollectionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DataCollectionMetadata.


        :param domain: The domain of this DataCollectionMetadata.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and domain is None:  # noqa: E501
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def source(self):
        """Gets the source of this DataCollectionMetadata.  # noqa: E501


        :return: The source of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DataCollectionMetadata.


        :param source: The source of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def storage(self):
        """Gets the storage of this DataCollectionMetadata.  # noqa: E501


        :return: The storage of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this DataCollectionMetadata.


        :param storage: The storage of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def type(self):
        """Gets the type of this DataCollectionMetadata.  # noqa: E501


        :return: The type of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataCollectionMetadata.


        :param type: The type of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this DataCollectionMetadata.  # noqa: E501


        :return: The version of this DataCollectionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DataCollectionMetadata.


        :param version: The version of this DataCollectionMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCollectionMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataCollectionMetadata):
            return True

        return self.to_dict() != other.to_dict()
