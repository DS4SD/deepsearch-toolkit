# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class SystemInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_non_admins_to_make_resources_public': 'bool',
        'api': 'SystemInfoApi',
        'deployment': 'SystemInfoDeployment',
        'toolkit': 'SystemInfoToolkit'
    }

    attribute_map = {
        'allow_non_admins_to_make_resources_public': 'allow_non_admins_to_make_resources_public',
        'api': 'api',
        'deployment': 'deployment',
        'toolkit': 'toolkit'
    }

    def __init__(self, allow_non_admins_to_make_resources_public=None, api=None, deployment=None, toolkit=None, local_vars_configuration=None):  # noqa: E501
        """SystemInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_non_admins_to_make_resources_public = None
        self._api = None
        self._deployment = None
        self._toolkit = None
        self.discriminator = None

        if allow_non_admins_to_make_resources_public is not None:
            self.allow_non_admins_to_make_resources_public = allow_non_admins_to_make_resources_public
        if api is not None:
            self.api = api
        if deployment is not None:
            self.deployment = deployment
        if toolkit is not None:
            self.toolkit = toolkit

    @property
    def allow_non_admins_to_make_resources_public(self):
        """Gets the allow_non_admins_to_make_resources_public of this SystemInfo.  # noqa: E501


        :return: The allow_non_admins_to_make_resources_public of this SystemInfo.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_admins_to_make_resources_public

    @allow_non_admins_to_make_resources_public.setter
    def allow_non_admins_to_make_resources_public(self, allow_non_admins_to_make_resources_public):
        """Sets the allow_non_admins_to_make_resources_public of this SystemInfo.


        :param allow_non_admins_to_make_resources_public: The allow_non_admins_to_make_resources_public of this SystemInfo.  # noqa: E501
        :type: bool
        """

        self._allow_non_admins_to_make_resources_public = allow_non_admins_to_make_resources_public

    @property
    def api(self):
        """Gets the api of this SystemInfo.  # noqa: E501


        :return: The api of this SystemInfo.  # noqa: E501
        :rtype: SystemInfoApi
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this SystemInfo.


        :param api: The api of this SystemInfo.  # noqa: E501
        :type: SystemInfoApi
        """

        self._api = api

    @property
    def deployment(self):
        """Gets the deployment of this SystemInfo.  # noqa: E501


        :return: The deployment of this SystemInfo.  # noqa: E501
        :rtype: SystemInfoDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this SystemInfo.


        :param deployment: The deployment of this SystemInfo.  # noqa: E501
        :type: SystemInfoDeployment
        """

        self._deployment = deployment

    @property
    def toolkit(self):
        """Gets the toolkit of this SystemInfo.  # noqa: E501


        :return: The toolkit of this SystemInfo.  # noqa: E501
        :rtype: SystemInfoToolkit
        """
        return self._toolkit

    @toolkit.setter
    def toolkit(self, toolkit):
        """Sets the toolkit of this SystemInfo.


        :param toolkit: The toolkit of this SystemInfo.  # noqa: E501
        :type: SystemInfoToolkit
        """

        self._toolkit = toolkit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemInfo):
            return True

        return self.to_dict() != other.to_dict()
