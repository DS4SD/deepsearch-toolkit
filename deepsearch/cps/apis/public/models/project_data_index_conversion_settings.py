# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class ProjectDataIndexConversionSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assemble': 'AssembleSettings',
        'metadata': 'CollectionMetadataSettings',
        'model_pipeline': 'ModelPipelineSettings',
        'ocr': 'OCRSettings',
        'page_labels': 'object',
        'type': 'str'
    }

    attribute_map = {
        'assemble': 'assemble',
        'metadata': 'metadata',
        'model_pipeline': 'model_pipeline',
        'ocr': 'ocr',
        'page_labels': 'page_labels',
        'type': 'type'
    }

    def __init__(self, assemble=None, metadata=None, model_pipeline=None, ocr=None, page_labels=None, type='direct', local_vars_configuration=None):  # noqa: E501
        """ProjectDataIndexConversionSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assemble = None
        self._metadata = None
        self._model_pipeline = None
        self._ocr = None
        self._page_labels = None
        self._type = None
        self.discriminator = None

        if assemble is not None:
            self.assemble = assemble
        if metadata is not None:
            self.metadata = metadata
        if model_pipeline is not None:
            self.model_pipeline = model_pipeline
        if ocr is not None:
            self.ocr = ocr
        if page_labels is not None:
            self.page_labels = page_labels
        if type is not None:
            self.type = type

    @property
    def assemble(self):
        """Gets the assemble of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The assemble of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: AssembleSettings
        """
        return self._assemble

    @assemble.setter
    def assemble(self, assemble):
        """Sets the assemble of this ProjectDataIndexConversionSettings.


        :param assemble: The assemble of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: AssembleSettings
        """

        self._assemble = assemble

    @property
    def metadata(self):
        """Gets the metadata of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The metadata of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: CollectionMetadataSettings
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProjectDataIndexConversionSettings.


        :param metadata: The metadata of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: CollectionMetadataSettings
        """

        self._metadata = metadata

    @property
    def model_pipeline(self):
        """Gets the model_pipeline of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The model_pipeline of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: ModelPipelineSettings
        """
        return self._model_pipeline

    @model_pipeline.setter
    def model_pipeline(self, model_pipeline):
        """Sets the model_pipeline of this ProjectDataIndexConversionSettings.


        :param model_pipeline: The model_pipeline of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: ModelPipelineSettings
        """

        self._model_pipeline = model_pipeline

    @property
    def ocr(self):
        """Gets the ocr of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The ocr of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: OCRSettings
        """
        return self._ocr

    @ocr.setter
    def ocr(self, ocr):
        """Sets the ocr of this ProjectDataIndexConversionSettings.


        :param ocr: The ocr of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: OCRSettings
        """

        self._ocr = ocr

    @property
    def page_labels(self):
        """Gets the page_labels of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The page_labels of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: object
        """
        return self._page_labels

    @page_labels.setter
    def page_labels(self, page_labels):
        """Sets the page_labels of this ProjectDataIndexConversionSettings.


        :param page_labels: The page_labels of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: object
        """

        self._page_labels = page_labels

    @property
    def type(self):
        """Gets the type of this ProjectDataIndexConversionSettings.  # noqa: E501


        :return: The type of this ProjectDataIndexConversionSettings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectDataIndexConversionSettings.


        :param type: The type of this ProjectDataIndexConversionSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["direct"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectDataIndexConversionSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectDataIndexConversionSettings):
            return True

        return self.to_dict() != other.to_dict()
