# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_reason': 'str',
        'kind': 'str',
        'proj_key': 'str',
        'related_tasks': 'list[RelatedTask]',
        'task_id': 'str',
        'task_status': 'str',
        'task_type': 'str'
    }

    attribute_map = {
        'error_reason': 'error_reason',
        'kind': 'kind',
        'proj_key': 'proj_key',
        'related_tasks': 'related_tasks',
        'task_id': 'task_id',
        'task_status': 'task_status',
        'task_type': 'task_type'
    }

    def __init__(self, error_reason=None, kind=None, proj_key=None, related_tasks=None, task_id=None, task_status=None, task_type=None, local_vars_configuration=None):  # noqa: E501
        """Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_reason = None
        self._kind = None
        self._proj_key = None
        self._related_tasks = None
        self._task_id = None
        self._task_status = None
        self._task_type = None
        self.discriminator = None

        self.error_reason = error_reason
        self.kind = kind
        self.proj_key = proj_key
        if related_tasks is not None:
            self.related_tasks = related_tasks
        self.task_id = task_id
        self.task_status = task_status
        self.task_type = task_type

    @property
    def error_reason(self):
        """Gets the error_reason of this Task.  # noqa: E501


        :return: The error_reason of this Task.  # noqa: E501
        :rtype: str
        """
        return self._error_reason

    @error_reason.setter
    def error_reason(self, error_reason):
        """Sets the error_reason of this Task.


        :param error_reason: The error_reason of this Task.  # noqa: E501
        :type: str
        """

        self._error_reason = error_reason

    @property
    def kind(self):
        """Gets the kind of this Task.  # noqa: E501


        :return: The kind of this Task.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Task.


        :param kind: The kind of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["project_task", "celery_task"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and kind not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def proj_key(self):
        """Gets the proj_key of this Task.  # noqa: E501


        :return: The proj_key of this Task.  # noqa: E501
        :rtype: str
        """
        return self._proj_key

    @proj_key.setter
    def proj_key(self, proj_key):
        """Sets the proj_key of this Task.


        :param proj_key: The proj_key of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and proj_key is None:  # noqa: E501
            raise ValueError("Invalid value for `proj_key`, must not be `None`")  # noqa: E501

        self._proj_key = proj_key

    @property
    def related_tasks(self):
        """Gets the related_tasks of this Task.  # noqa: E501


        :return: The related_tasks of this Task.  # noqa: E501
        :rtype: list[RelatedTask]
        """
        return self._related_tasks

    @related_tasks.setter
    def related_tasks(self, related_tasks):
        """Sets the related_tasks of this Task.


        :param related_tasks: The related_tasks of this Task.  # noqa: E501
        :type: list[RelatedTask]
        """

        self._related_tasks = related_tasks

    @property
    def task_id(self):
        """Gets the task_id of this Task.  # noqa: E501


        :return: The task_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Task.


        :param task_id: The task_id of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def task_status(self):
        """Gets the task_status of this Task.  # noqa: E501


        :return: The task_status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this Task.


        :param task_status: The task_status of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_status is None:  # noqa: E501
            raise ValueError("Invalid value for `task_status`, must not be `None`")  # noqa: E501

        self._task_status = task_status

    @property
    def task_type(self):
        """Gets the task_type of this Task.  # noqa: E501


        :return: The task_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.


        :param task_type: The task_type of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
