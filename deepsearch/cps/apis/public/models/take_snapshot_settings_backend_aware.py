# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class TakeSnapshotSettingsBackendAware(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backend_flavours': 'BackendFlavour',
        'load_into_kg_after_created': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'backend_flavours': 'backend_flavours',
        'load_into_kg_after_created': 'load_into_kg_after_created',
        'name': 'name'
    }

    def __init__(self, backend_flavours=None, load_into_kg_after_created=False, name=None, local_vars_configuration=None):  # noqa: E501
        """TakeSnapshotSettingsBackendAware - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backend_flavours = None
        self._load_into_kg_after_created = None
        self._name = None
        self.discriminator = None

        self.backend_flavours = backend_flavours
        if load_into_kg_after_created is not None:
            self.load_into_kg_after_created = load_into_kg_after_created
        if name is not None:
            self.name = name

    @property
    def backend_flavours(self):
        """Gets the backend_flavours of this TakeSnapshotSettingsBackendAware.  # noqa: E501


        :return: The backend_flavours of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :rtype: BackendFlavour
        """
        return self._backend_flavours

    @backend_flavours.setter
    def backend_flavours(self, backend_flavours):
        """Sets the backend_flavours of this TakeSnapshotSettingsBackendAware.


        :param backend_flavours: The backend_flavours of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :type: BackendFlavour
        """
        if self.local_vars_configuration.client_side_validation and backend_flavours is None:  # noqa: E501
            raise ValueError("Invalid value for `backend_flavours`, must not be `None`")  # noqa: E501

        self._backend_flavours = backend_flavours

    @property
    def load_into_kg_after_created(self):
        """Gets the load_into_kg_after_created of this TakeSnapshotSettingsBackendAware.  # noqa: E501


        :return: The load_into_kg_after_created of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :rtype: bool
        """
        return self._load_into_kg_after_created

    @load_into_kg_after_created.setter
    def load_into_kg_after_created(self, load_into_kg_after_created):
        """Sets the load_into_kg_after_created of this TakeSnapshotSettingsBackendAware.


        :param load_into_kg_after_created: The load_into_kg_after_created of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :type: bool
        """

        self._load_into_kg_after_created = load_into_kg_after_created

    @property
    def name(self):
        """Gets the name of this TakeSnapshotSettingsBackendAware.  # noqa: E501


        :return: The name of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TakeSnapshotSettingsBackendAware.


        :param name: The name of this TakeSnapshotSettingsBackendAware.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TakeSnapshotSettingsBackendAware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TakeSnapshotSettingsBackendAware):
            return True

        return self.to_dict() != other.to_dict()
