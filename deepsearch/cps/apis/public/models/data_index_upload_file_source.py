# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class DataIndexUploadFileSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conversion_settings': 'ProjectDataIndexConversionSettings',
        'file_url': 'list[str]',
        's3_source': 'ProjectProjKeyDataIndicesIndexKeyActionsCcsConvertUploadS3Source',
        'scratch_files_id': 'list[str]'
    }

    attribute_map = {
        'conversion_settings': 'conversion_settings',
        'file_url': 'file_url',
        's3_source': 's3_source',
        'scratch_files_id': 'scratch_files_id'
    }

    def __init__(self, conversion_settings=None, file_url=None, s3_source=None, scratch_files_id=None, local_vars_configuration=None):  # noqa: E501
        """DataIndexUploadFileSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conversion_settings = None
        self._file_url = None
        self._s3_source = None
        self._scratch_files_id = None
        self.discriminator = None

        if conversion_settings is not None:
            self.conversion_settings = conversion_settings
        if file_url is not None:
            self.file_url = file_url
        if s3_source is not None:
            self.s3_source = s3_source
        if scratch_files_id is not None:
            self.scratch_files_id = scratch_files_id

    @property
    def conversion_settings(self):
        """Gets the conversion_settings of this DataIndexUploadFileSource.  # noqa: E501


        :return: The conversion_settings of this DataIndexUploadFileSource.  # noqa: E501
        :rtype: ProjectDataIndexConversionSettings
        """
        return self._conversion_settings

    @conversion_settings.setter
    def conversion_settings(self, conversion_settings):
        """Sets the conversion_settings of this DataIndexUploadFileSource.


        :param conversion_settings: The conversion_settings of this DataIndexUploadFileSource.  # noqa: E501
        :type: ProjectDataIndexConversionSettings
        """

        self._conversion_settings = conversion_settings

    @property
    def file_url(self):
        """Gets the file_url of this DataIndexUploadFileSource.  # noqa: E501

        List of File's URL to be converted and uploaded to the data index  # noqa: E501

        :return: The file_url of this DataIndexUploadFileSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this DataIndexUploadFileSource.

        List of File's URL to be converted and uploaded to the data index  # noqa: E501

        :param file_url: The file_url of this DataIndexUploadFileSource.  # noqa: E501
        :type: list[str]
        """

        self._file_url = file_url

    @property
    def s3_source(self):
        """Gets the s3_source of this DataIndexUploadFileSource.  # noqa: E501


        :return: The s3_source of this DataIndexUploadFileSource.  # noqa: E501
        :rtype: ProjectProjKeyDataIndicesIndexKeyActionsCcsConvertUploadS3Source
        """
        return self._s3_source

    @s3_source.setter
    def s3_source(self, s3_source):
        """Sets the s3_source of this DataIndexUploadFileSource.


        :param s3_source: The s3_source of this DataIndexUploadFileSource.  # noqa: E501
        :type: ProjectProjKeyDataIndicesIndexKeyActionsCcsConvertUploadS3Source
        """

        self._s3_source = s3_source

    @property
    def scratch_files_id(self):
        """Gets the scratch_files_id of this DataIndexUploadFileSource.  # noqa: E501

        List of CCS's scratch files id to be converted and uploaded to the data index  # noqa: E501

        :return: The scratch_files_id of this DataIndexUploadFileSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._scratch_files_id

    @scratch_files_id.setter
    def scratch_files_id(self, scratch_files_id):
        """Sets the scratch_files_id of this DataIndexUploadFileSource.

        List of CCS's scratch files id to be converted and uploaded to the data index  # noqa: E501

        :param scratch_files_id: The scratch_files_id of this DataIndexUploadFileSource.  # noqa: E501
        :type: list[str]
        """

        self._scratch_files_id = scratch_files_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataIndexUploadFileSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataIndexUploadFileSource):
            return True

        return self.to_dict() != other.to_dict()
