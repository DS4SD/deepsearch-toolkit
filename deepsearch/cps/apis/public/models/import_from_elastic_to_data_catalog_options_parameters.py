# coding: utf-8

"""
    Corpus Processing Service (CPS) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.public.configuration import Configuration


class ImportFromElasticToDataCatalogOptionsParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'import_s3_data': 'bool',
        'index': 'str',
        'page_size': 'float',
        'query_options': 'ImportFromElasticToDataCatalogOptionsParametersQueryOptions',
        's3': 'ImportFromElasticToDataCatalogS3Coords'
    }

    attribute_map = {
        'import_s3_data': 'import_s3_data',
        'index': 'index',
        'page_size': 'page_size',
        'query_options': 'query_options',
        's3': 's3'
    }

    def __init__(self, import_s3_data=None, index=None, page_size=None, query_options=None, s3=None, local_vars_configuration=None):  # noqa: E501
        """ImportFromElasticToDataCatalogOptionsParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._import_s3_data = None
        self._index = None
        self._page_size = None
        self._query_options = None
        self._s3 = None
        self.discriminator = None

        if import_s3_data is not None:
            self.import_s3_data = import_s3_data
        self.index = index
        if page_size is not None:
            self.page_size = page_size
        self.query_options = query_options
        if s3 is not None:
            self.s3 = s3

    @property
    def import_s3_data(self):
        """Gets the import_s3_data of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501


        :return: The import_s3_data of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :rtype: bool
        """
        return self._import_s3_data

    @import_s3_data.setter
    def import_s3_data(self, import_s3_data):
        """Sets the import_s3_data of this ImportFromElasticToDataCatalogOptionsParameters.


        :param import_s3_data: The import_s3_data of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :type: bool
        """

        self._import_s3_data = import_s3_data

    @property
    def index(self):
        """Gets the index of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501


        :return: The index of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ImportFromElasticToDataCatalogOptionsParameters.


        :param index: The index of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and index is None:  # noqa: E501
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def page_size(self):
        """Gets the page_size of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501


        :return: The page_size of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ImportFromElasticToDataCatalogOptionsParameters.


        :param page_size: The page_size of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :type: float
        """

        self._page_size = page_size

    @property
    def query_options(self):
        """Gets the query_options of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501


        :return: The query_options of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :rtype: ImportFromElasticToDataCatalogOptionsParametersQueryOptions
        """
        return self._query_options

    @query_options.setter
    def query_options(self, query_options):
        """Sets the query_options of this ImportFromElasticToDataCatalogOptionsParameters.


        :param query_options: The query_options of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :type: ImportFromElasticToDataCatalogOptionsParametersQueryOptions
        """
        if self.local_vars_configuration.client_side_validation and query_options is None:  # noqa: E501
            raise ValueError("Invalid value for `query_options`, must not be `None`")  # noqa: E501

        self._query_options = query_options

    @property
    def s3(self):
        """Gets the s3 of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501


        :return: The s3 of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :rtype: ImportFromElasticToDataCatalogS3Coords
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this ImportFromElasticToDataCatalogOptionsParameters.


        :param s3: The s3 of this ImportFromElasticToDataCatalogOptionsParameters.  # noqa: E501
        :type: ImportFromElasticToDataCatalogS3Coords
        """

        self._s3 = s3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportFromElasticToDataCatalogOptionsParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportFromElasticToDataCatalogOptionsParameters):
            return True

        return self.to_dict() != other.to_dict()
