# coding: utf-8

"""
    Knowledge-Graph Create API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.kg.create.configuration import Configuration


class DatabaseSourceS3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key': 'str',
        'bucket': 'str',
        'host': 'str',
        'is_secure': 'bool',
        'port': 'int',
        'secret_key': 'str'
    }

    attribute_map = {
        'access_key': 'access-key',
        'bucket': 'bucket',
        'host': 'host',
        'is_secure': 'is_secure',
        'port': 'port',
        'secret_key': 'secret-key'
    }

    def __init__(self, access_key=None, bucket=None, host=None, is_secure=None, port=None, secret_key=None, local_vars_configuration=None):  # noqa: E501
        """DatabaseSourceS3 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key = None
        self._bucket = None
        self._host = None
        self._is_secure = None
        self._port = None
        self._secret_key = None
        self.discriminator = None

        self.access_key = access_key
        self.bucket = bucket
        self.host = host
        if is_secure is not None:
            self.is_secure = is_secure
        self.port = port
        self.secret_key = secret_key

    @property
    def access_key(self):
        """Gets the access_key of this DatabaseSourceS3.  # noqa: E501


        :return: The access_key of this DatabaseSourceS3.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this DatabaseSourceS3.


        :param access_key: The access_key of this DatabaseSourceS3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_key is None:  # noqa: E501
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def bucket(self):
        """Gets the bucket of this DatabaseSourceS3.  # noqa: E501


        :return: The bucket of this DatabaseSourceS3.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this DatabaseSourceS3.


        :param bucket: The bucket of this DatabaseSourceS3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bucket is None:  # noqa: E501
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501

        self._bucket = bucket

    @property
    def host(self):
        """Gets the host of this DatabaseSourceS3.  # noqa: E501


        :return: The host of this DatabaseSourceS3.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DatabaseSourceS3.


        :param host: The host of this DatabaseSourceS3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host is None:  # noqa: E501
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def is_secure(self):
        """Gets the is_secure of this DatabaseSourceS3.  # noqa: E501


        :return: The is_secure of this DatabaseSourceS3.  # noqa: E501
        :rtype: bool
        """
        return self._is_secure

    @is_secure.setter
    def is_secure(self, is_secure):
        """Sets the is_secure of this DatabaseSourceS3.


        :param is_secure: The is_secure of this DatabaseSourceS3.  # noqa: E501
        :type: bool
        """

        self._is_secure = is_secure

    @property
    def port(self):
        """Gets the port of this DatabaseSourceS3.  # noqa: E501


        :return: The port of this DatabaseSourceS3.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DatabaseSourceS3.


        :param port: The port of this DatabaseSourceS3.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def secret_key(self):
        """Gets the secret_key of this DatabaseSourceS3.  # noqa: E501


        :return: The secret_key of this DatabaseSourceS3.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this DatabaseSourceS3.


        :param secret_key: The secret_key of this DatabaseSourceS3.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_key is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabaseSourceS3):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatabaseSourceS3):
            return True

        return self.to_dict() != other.to_dict()
