# coding: utf-8

"""
    Knowledge-Graph Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.kg.query.configuration import Configuration


class GraphEdge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source': 'list[str]',
        'target': 'list[str]',
        'matrix': 'GraphMatrix',
        'name': 'str',
        'symmetric': 'bool'
    }

    attribute_map = {
        'source': 'source',
        'target': 'target',
        'matrix': 'matrix',
        'name': 'name',
        'symmetric': 'symmetric'
    }

    def __init__(self, source=None, target=None, matrix=None, name=None, symmetric=None, local_vars_configuration=None):  # noqa: E501
        """GraphEdge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source = None
        self._target = None
        self._matrix = None
        self._name = None
        self._symmetric = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if matrix is not None:
            self.matrix = matrix
        if name is not None:
            self.name = name
        if symmetric is not None:
            self.symmetric = symmetric

    @property
    def source(self):
        """Gets the source of this GraphEdge.  # noqa: E501


        :return: The source of this GraphEdge.  # noqa: E501
        :rtype: list[str]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GraphEdge.


        :param source: The source of this GraphEdge.  # noqa: E501
        :type: list[str]
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this GraphEdge.  # noqa: E501


        :return: The target of this GraphEdge.  # noqa: E501
        :rtype: list[str]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this GraphEdge.


        :param target: The target of this GraphEdge.  # noqa: E501
        :type: list[str]
        """

        self._target = target

    @property
    def matrix(self):
        """Gets the matrix of this GraphEdge.  # noqa: E501


        :return: The matrix of this GraphEdge.  # noqa: E501
        :rtype: GraphMatrix
        """
        return self._matrix

    @matrix.setter
    def matrix(self, matrix):
        """Sets the matrix of this GraphEdge.


        :param matrix: The matrix of this GraphEdge.  # noqa: E501
        :type: GraphMatrix
        """

        self._matrix = matrix

    @property
    def name(self):
        """Gets the name of this GraphEdge.  # noqa: E501


        :return: The name of this GraphEdge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GraphEdge.


        :param name: The name of this GraphEdge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symmetric(self):
        """Gets the symmetric of this GraphEdge.  # noqa: E501


        :return: The symmetric of this GraphEdge.  # noqa: E501
        :rtype: bool
        """
        return self._symmetric

    @symmetric.setter
    def symmetric(self, symmetric):
        """Sets the symmetric of this GraphEdge.


        :param symmetric: The symmetric of this GraphEdge.  # noqa: E501
        :type: bool
        """

        self._symmetric = symmetric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphEdge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphEdge):
            return True

        return self.to_dict() != other.to_dict()
