# coding: utf-8

"""
    Knowledge-Graph Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.kg.query.configuration import Configuration


class GraphMatrix(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bd': 'int',
        'bs': 'int',
        'm': 'int',
        'n': 'int',
        'nnz': 'int'
    }

    attribute_map = {
        'bd': 'Bd',
        'bs': 'Bs',
        'm': 'M',
        'n': 'N',
        'nnz': 'NNZ'
    }

    def __init__(self, bd=None, bs=None, m=None, n=None, nnz=None, local_vars_configuration=None):  # noqa: E501
        """GraphMatrix - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bd = None
        self._bs = None
        self._m = None
        self._n = None
        self._nnz = None
        self.discriminator = None

        self.bd = bd
        self.bs = bs
        self.m = m
        self.n = n
        self.nnz = nnz

    @property
    def bd(self):
        """Gets the bd of this GraphMatrix.  # noqa: E501


        :return: The bd of this GraphMatrix.  # noqa: E501
        :rtype: int
        """
        return self._bd

    @bd.setter
    def bd(self, bd):
        """Sets the bd of this GraphMatrix.


        :param bd: The bd of this GraphMatrix.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bd is None:  # noqa: E501
            raise ValueError("Invalid value for `bd`, must not be `None`")  # noqa: E501

        self._bd = bd

    @property
    def bs(self):
        """Gets the bs of this GraphMatrix.  # noqa: E501


        :return: The bs of this GraphMatrix.  # noqa: E501
        :rtype: int
        """
        return self._bs

    @bs.setter
    def bs(self, bs):
        """Sets the bs of this GraphMatrix.


        :param bs: The bs of this GraphMatrix.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bs is None:  # noqa: E501
            raise ValueError("Invalid value for `bs`, must not be `None`")  # noqa: E501

        self._bs = bs

    @property
    def m(self):
        """Gets the m of this GraphMatrix.  # noqa: E501


        :return: The m of this GraphMatrix.  # noqa: E501
        :rtype: int
        """
        return self._m

    @m.setter
    def m(self, m):
        """Sets the m of this GraphMatrix.


        :param m: The m of this GraphMatrix.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and m is None:  # noqa: E501
            raise ValueError("Invalid value for `m`, must not be `None`")  # noqa: E501

        self._m = m

    @property
    def n(self):
        """Gets the n of this GraphMatrix.  # noqa: E501


        :return: The n of this GraphMatrix.  # noqa: E501
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this GraphMatrix.


        :param n: The n of this GraphMatrix.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and n is None:  # noqa: E501
            raise ValueError("Invalid value for `n`, must not be `None`")  # noqa: E501

        self._n = n

    @property
    def nnz(self):
        """Gets the nnz of this GraphMatrix.  # noqa: E501


        :return: The nnz of this GraphMatrix.  # noqa: E501
        :rtype: int
        """
        return self._nnz

    @nnz.setter
    def nnz(self, nnz):
        """Sets the nnz of this GraphMatrix.


        :param nnz: The nnz of this GraphMatrix.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and nnz is None:  # noqa: E501
            raise ValueError("Invalid value for `nnz`, must not be `None`")  # noqa: E501

        self._nnz = nnz

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphMatrix):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphMatrix):
            return True

        return self.to_dict() != other.to_dict()
