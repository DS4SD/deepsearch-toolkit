# coding: utf-8

"""
    Knowledge-Graph Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.kg.query.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'db': 'str',
        'ids': 'list[str]',
        'projection': 'object'
    }

    attribute_map = {
        'db': 'db',
        'ids': 'ids',
        'projection': 'projection'
    }

    def __init__(self, db=None, ids=None, projection=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._db = None
        self._ids = None
        self._projection = None
        self.discriminator = None

        self.db = db
        self.ids = ids
        if projection is not None:
            self.projection = projection

    @property
    def db(self):
        """Gets the db of this InlineObject.  # noqa: E501


        :return: The db of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this InlineObject.


        :param db: The db of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and db is None:  # noqa: E501
            raise ValueError("Invalid value for `db`, must not be `None`")  # noqa: E501

        self._db = db

    @property
    def ids(self):
        """Gets the ids of this InlineObject.  # noqa: E501


        :return: The ids of this InlineObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this InlineObject.


        :param ids: The ids of this InlineObject.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and ids is None:  # noqa: E501
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    @property
    def projection(self):
        """Gets the projection of this InlineObject.  # noqa: E501

        A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}).  # noqa: E501

        :return: The projection of this InlineObject.  # noqa: E501
        :rtype: object
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this InlineObject.

        A dict specifying the fields to include or exclude. Use a dict to exclude fields from the result (e.g. projection={'main-text': false}).  # noqa: E501

        :param projection: The projection of this InlineObject.  # noqa: E501
        :type: object
        """

        self._projection = projection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
