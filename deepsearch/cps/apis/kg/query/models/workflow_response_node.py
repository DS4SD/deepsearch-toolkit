# coding: utf-8

"""
    Knowledge-Graph Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.kg.query.configuration import Configuration


class WorkflowResponseNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categories': 'list[str]',
        'db': 'str',
        'hash': 'str',
        'synonyms': 'list[str]',
        'index': 'int',
        'weight': 'float'
    }

    attribute_map = {
        'categories': '_categories',
        'db': '_db',
        'hash': '_hash',
        'synonyms': '_synonyms',
        'index': 'index',
        'weight': 'weight'
    }

    def __init__(self, categories=None, db=None, hash=None, synonyms=None, index=None, weight=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowResponseNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._categories = None
        self._db = None
        self._hash = None
        self._synonyms = None
        self._index = None
        self._weight = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if db is not None:
            self.db = db
        if hash is not None:
            self.hash = hash
        if synonyms is not None:
            self.synonyms = synonyms
        if index is not None:
            self.index = index
        if weight is not None:
            self.weight = weight

    @property
    def categories(self):
        """Gets the categories of this WorkflowResponseNode.  # noqa: E501


        :return: The categories of this WorkflowResponseNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this WorkflowResponseNode.


        :param categories: The categories of this WorkflowResponseNode.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def db(self):
        """Gets the db of this WorkflowResponseNode.  # noqa: E501


        :return: The db of this WorkflowResponseNode.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this WorkflowResponseNode.


        :param db: The db of this WorkflowResponseNode.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def hash(self):
        """Gets the hash of this WorkflowResponseNode.  # noqa: E501


        :return: The hash of this WorkflowResponseNode.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this WorkflowResponseNode.


        :param hash: The hash of this WorkflowResponseNode.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def synonyms(self):
        """Gets the synonyms of this WorkflowResponseNode.  # noqa: E501


        :return: The synonyms of this WorkflowResponseNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this WorkflowResponseNode.


        :param synonyms: The synonyms of this WorkflowResponseNode.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def index(self):
        """Gets the index of this WorkflowResponseNode.  # noqa: E501


        :return: The index of this WorkflowResponseNode.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this WorkflowResponseNode.


        :param index: The index of this WorkflowResponseNode.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def weight(self):
        """Gets the weight of this WorkflowResponseNode.  # noqa: E501


        :return: The weight of this WorkflowResponseNode.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WorkflowResponseNode.


        :param weight: The weight of this WorkflowResponseNode.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowResponseNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowResponseNode):
            return True

        return self.to_dict() != other.to_dict()
