# coding: utf-8

"""
    User Management API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deepsearch.cps.apis.user.configuration import Configuration


class AuditRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'details': 'object',
        'id': 'str',
        'message': 'str',
        'proj_key': 'str',
        'timestamp': 'str',
        'type': 'str',
        'user_key': 'str'
    }

    attribute_map = {
        'details': 'details',
        'id': 'id',
        'message': 'message',
        'proj_key': 'proj_key',
        'timestamp': 'timestamp',
        'type': 'type',
        'user_key': 'user_key'
    }

    def __init__(self, details=None, id=None, message=None, proj_key=None, timestamp=None, type=None, user_key=None, local_vars_configuration=None):  # noqa: E501
        """AuditRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._details = None
        self._id = None
        self._message = None
        self._proj_key = None
        self._timestamp = None
        self._type = None
        self._user_key = None
        self.discriminator = None

        self.details = details
        self.id = id
        self.message = message
        self.proj_key = proj_key
        self.timestamp = timestamp
        self.type = type
        self.user_key = user_key

    @property
    def details(self):
        """Gets the details of this AuditRecord.  # noqa: E501


        :return: The details of this AuditRecord.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AuditRecord.


        :param details: The details of this AuditRecord.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and details is None:  # noqa: E501
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def id(self):
        """Gets the id of this AuditRecord.  # noqa: E501


        :return: The id of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditRecord.


        :param id: The id of this AuditRecord.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this AuditRecord.  # noqa: E501


        :return: The message of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditRecord.


        :param message: The message of this AuditRecord.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def proj_key(self):
        """Gets the proj_key of this AuditRecord.  # noqa: E501


        :return: The proj_key of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._proj_key

    @proj_key.setter
    def proj_key(self, proj_key):
        """Sets the proj_key of this AuditRecord.


        :param proj_key: The proj_key of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._proj_key = proj_key

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditRecord.  # noqa: E501


        :return: The timestamp of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditRecord.


        :param timestamp: The timestamp of this AuditRecord.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this AuditRecord.  # noqa: E501


        :return: The type of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuditRecord.


        :param type: The type of this AuditRecord.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user_key(self):
        """Gets the user_key of this AuditRecord.  # noqa: E501


        :return: The user_key of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this AuditRecord.


        :param user_key: The user_key of this AuditRecord.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_key is None:  # noqa: E501
            raise ValueError("Invalid value for `user_key`, must not be `None`")  # noqa: E501

        self._user_key = user_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditRecord):
            return True

        return self.to_dict() != other.to_dict()
