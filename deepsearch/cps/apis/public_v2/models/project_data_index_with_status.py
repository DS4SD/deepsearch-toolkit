# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.elastic_metadata import ElasticMetadata
from deepsearch.cps.apis.public_v2.models.source import Source
from deepsearch.cps.apis.public_v2.models.view_of import ViewOf
from typing import Optional, Set
from typing_extensions import Self

class ProjectDataIndexWithStatus(BaseModel):
    """
    ProjectDataIndexWithStatus
    """ # noqa: E501
    source: Source
    name: StrictStr
    documents: StrictInt
    health: StrictStr
    status: StrictStr
    creation_date: StrictStr
    metadata: Optional[ElasticMetadata] = None
    description: StrictStr
    schema_key: Optional[StrictStr] = None
    type: StrictStr
    view_of: Optional[ViewOf] = None
    record_properties: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["source", "name", "documents", "health", "status", "creation_date", "metadata", "description", "schema_key", "type", "view_of", "record_properties"]

    @field_validator('schema_key')
    def schema_key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['deepsearch-doc', 'deepsearch-db', 'generic']):
            raise ValueError("must be one of enum values ('deepsearch-doc', 'deepsearch-db', 'generic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectDataIndexWithStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_of
        if self.view_of:
            _dict['view_of'] = self.view_of.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectDataIndexWithStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "name": obj.get("name"),
            "documents": obj.get("documents"),
            "health": obj.get("health"),
            "status": obj.get("status"),
            "creation_date": obj.get("creation_date"),
            "metadata": ElasticMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "description": obj.get("description"),
            "schema_key": obj.get("schema_key"),
            "type": obj.get("type"),
            "view_of": ViewOf.from_dict(obj["view_of"]) if obj.get("view_of") is not None else None,
            "record_properties": obj.get("record_properties")
        })
        return _obj


