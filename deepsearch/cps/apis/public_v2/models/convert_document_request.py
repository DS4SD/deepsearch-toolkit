# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.convert_document_request_file_source import ConvertDocumentRequestFileSource
from deepsearch.cps.apis.public_v2.models.convert_document_request_http_source import ConvertDocumentRequestHttpSource
from deepsearch.cps.apis.public_v2.models.convert_document_request_image_urls import ConvertDocumentRequestImageUrls
from deepsearch.cps.apis.public_v2.models.convert_document_request_settings import ConvertDocumentRequestSettings
from deepsearch.cps.apis.public_v2.models.truncate_pages import TruncatePages
from typing import Optional, Set
from typing_extensions import Self

class ConvertDocumentRequest(BaseModel):
    """
    ConvertDocumentRequest
    """ # noqa: E501
    http_source: Optional[ConvertDocumentRequestHttpSource] = None
    file_source: Optional[ConvertDocumentRequestFileSource] = None
    settings: Optional[ConvertDocumentRequestSettings] = None
    image_urls: Optional[ConvertDocumentRequestImageUrls] = None
    truncate_pages: Optional[TruncatePages] = None
    __properties: ClassVar[List[str]] = ["http_source", "file_source", "settings", "image_urls", "truncate_pages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConvertDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_source
        if self.http_source:
            _dict['http_source'] = self.http_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_source
        if self.file_source:
            _dict['file_source'] = self.file_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_urls
        if self.image_urls:
            _dict['image_urls'] = self.image_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of truncate_pages
        if self.truncate_pages:
            _dict['truncate_pages'] = self.truncate_pages.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConvertDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "http_source": ConvertDocumentRequestHttpSource.from_dict(obj["http_source"]) if obj.get("http_source") is not None else None,
            "file_source": ConvertDocumentRequestFileSource.from_dict(obj["file_source"]) if obj.get("file_source") is not None else None,
            "settings": ConvertDocumentRequestSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "image_urls": ConvertDocumentRequestImageUrls.from_dict(obj["image_urls"]) if obj.get("image_urls") is not None else None,
            "truncate_pages": TruncatePages.from_dict(obj["truncate_pages"]) if obj.get("truncate_pages") is not None else None
        })
        return _obj


