# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.link import Link
from deepsearch.cps.apis.public_v2.models.model_date import ModelDate
from deepsearch.cps.apis.public_v2.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class Acquisition(BaseModel):
    """
    Information on how the data was obtained.
    """ # noqa: E501
    type: StrictStr = Field(description="The method to obtain the data.")
    var_date: Optional[ModelDate] = Field(default=None, alias="date")
    link: Optional[Link] = None
    size: Optional[Size] = None
    __properties: ClassVar[List[str]] = ["type", "date", "link", "size"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['API', 'FTP', 'Download', 'Link', 'Web scraping/Crawling', 'Other']):
            raise ValueError("must be one of enum values ('API', 'FTP', 'Download', 'Link', 'Web scraping/Crawling', 'Other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Acquisition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Acquisition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "date": ModelDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None
        })
        return _obj


