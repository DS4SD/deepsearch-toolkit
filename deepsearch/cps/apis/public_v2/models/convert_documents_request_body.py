# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.conversion_settings import ConversionSettings
from deepsearch.cps.apis.public_v2.models.convert_documents_request_body_target_settings import ConvertDocumentsRequestBodyTargetSettings
from deepsearch.cps.apis.public_v2.models.document_hashes import DocumentHashes
from deepsearch.cps.apis.public_v2.models.upload_to_elastic import UploadToElastic
from deepsearch.cps.apis.public_v2.models.without_operations import WithoutOperations
from typing import Optional, Set
from typing_extensions import Self

class ConvertDocumentsRequestBody(BaseModel):
    """
    ConvertDocumentsRequestBody
    """ # noqa: E501
    conversion_settings: Optional[ConversionSettings] = None
    target_settings: Optional[ConvertDocumentsRequestBodyTargetSettings] = None
    document_hashes: Optional[DocumentHashes] = None
    without_operations: Optional[WithoutOperations] = None
    upload_to_elastic: Optional[UploadToElastic] = None
    __properties: ClassVar[List[str]] = ["conversion_settings", "target_settings", "document_hashes", "without_operations", "upload_to_elastic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConvertDocumentsRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversion_settings
        if self.conversion_settings:
            _dict['conversion_settings'] = self.conversion_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_settings
        if self.target_settings:
            _dict['target_settings'] = self.target_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_hashes
        if self.document_hashes:
            _dict['document_hashes'] = self.document_hashes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of without_operations
        if self.without_operations:
            _dict['without_operations'] = self.without_operations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_to_elastic
        if self.upload_to_elastic:
            _dict['upload_to_elastic'] = self.upload_to_elastic.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConvertDocumentsRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversion_settings": ConversionSettings.from_dict(obj["conversion_settings"]) if obj.get("conversion_settings") is not None else None,
            "target_settings": ConvertDocumentsRequestBodyTargetSettings.from_dict(obj["target_settings"]) if obj.get("target_settings") is not None else None,
            "document_hashes": DocumentHashes.from_dict(obj["document_hashes"]) if obj.get("document_hashes") is not None else None,
            "without_operations": WithoutOperations.from_dict(obj["without_operations"]) if obj.get("without_operations") is not None else None,
            "upload_to_elastic": UploadToElastic.from_dict(obj["upload_to_elastic"]) if obj.get("upload_to_elastic") is not None else None
        })
        return _obj


