# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from deepsearch.cps.apis.public_v2.models.completed_at import CompletedAt
from deepsearch.cps.apis.public_v2.models.error_reason import ErrorReason
from deepsearch.cps.apis.public_v2.models.related_tasks import RelatedTasks
from deepsearch.cps.apis.public_v2.models.start_count import StartCount
from deepsearch.cps.apis.public_v2.models.started_at import StartedAt
from typing import Optional, Set
from typing_extensions import Self

class TaskContext(BaseModel):
    """
    TaskContext
    """ # noqa: E501
    proj_key: StrictStr
    user_key: StrictStr
    task_type: StrictStr
    task_id: StrictStr
    task_status: StrictStr
    execution_mode: StrictStr
    progress: Union[StrictFloat, StrictInt]
    meta: Dict[str, Any]
    created_at: datetime
    started_at: Optional[StartedAt] = None
    completed_at: Optional[CompletedAt] = None
    start_count: Optional[StartCount] = None
    error_reason: Optional[ErrorReason] = None
    related_tasks: Optional[RelatedTasks] = None
    __properties: ClassVar[List[str]] = ["proj_key", "user_key", "task_type", "task_id", "task_status", "execution_mode", "progress", "meta", "created_at", "started_at", "completed_at", "start_count", "error_reason", "related_tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of started_at
        if self.started_at:
            _dict['started_at'] = self.started_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_at
        if self.completed_at:
            _dict['completed_at'] = self.completed_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_count
        if self.start_count:
            _dict['start_count'] = self.start_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_reason
        if self.error_reason:
            _dict['error_reason'] = self.error_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_tasks
        if self.related_tasks:
            _dict['related_tasks'] = self.related_tasks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "proj_key": obj.get("proj_key"),
            "user_key": obj.get("user_key"),
            "task_type": obj.get("task_type"),
            "task_id": obj.get("task_id"),
            "task_status": obj.get("task_status"),
            "execution_mode": obj.get("execution_mode"),
            "progress": obj.get("progress"),
            "meta": obj.get("meta"),
            "created_at": obj.get("created_at"),
            "started_at": StartedAt.from_dict(obj["started_at"]) if obj.get("started_at") is not None else None,
            "completed_at": CompletedAt.from_dict(obj["completed_at"]) if obj.get("completed_at") is not None else None,
            "start_count": StartCount.from_dict(obj["start_count"]) if obj.get("start_count") is not None else None,
            "error_reason": ErrorReason.from_dict(obj["error_reason"]) if obj.get("error_reason") is not None else None,
            "related_tasks": RelatedTasks.from_dict(obj["related_tasks"]) if obj.get("related_tasks") is not None else None
        })
        return _obj


