# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.model_id import ModelId
from deepsearch.cps.apis.public_v2.models.params import Params
from deepsearch.cps.apis.public_v2.models.prompt_template import PromptTemplate
from deepsearch.cps.apis.public_v2.models.timeout import Timeout
from typing import Optional, Set
from typing_extensions import Self

class GenAIPartialParams(BaseModel):
    """
    GenAIPartialParams
    """ # noqa: E501
    model_id: Optional[ModelId] = None
    prompt_template: Optional[PromptTemplate] = None
    params: Optional[Params] = None
    timeout: Optional[Timeout] = None
    __properties: ClassVar[List[str]] = ["model_id", "prompt_template", "params", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenAIPartialParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_id
        if self.model_id:
            _dict['model_id'] = self.model_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_template
        if self.prompt_template:
            _dict['prompt_template'] = self.prompt_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeout
        if self.timeout:
            _dict['timeout'] = self.timeout.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenAIPartialParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_id": ModelId.from_dict(obj["model_id"]) if obj.get("model_id") is not None else None,
            "prompt_template": PromptTemplate.from_dict(obj["prompt_template"]) if obj.get("prompt_template") is not None else None,
            "params": Params.from_dict(obj["params"]) if obj.get("params") is not None else None,
            "timeout": Timeout.from_dict(obj["timeout"]) if obj.get("timeout") is not None else None
        })
        return _obj


