# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.genai_cpd_api_key import GenaiCpdApiKey
from deepsearch.cps.apis.public_v2.models.genai_cpd_password import GenaiCpdPassword
from typing import Optional, Set
from typing_extensions import Self

class GenAICPDConfig(BaseModel):
    """
    Config for CPD watsonx
    """ # noqa: E501
    genai_api: StrictStr = Field(alias="GENAI_API")
    genai_project_id: StrictStr = Field(alias="GENAI_PROJECT_ID")
    genai_cpd_url: StrictStr = Field(alias="GENAI_CPD_URL")
    genai_cpd_verify_tls: Optional[StrictBool] = Field(default=True, alias="GENAI_CPD_VERIFY_TLS")
    genai_cpd_username: StrictStr = Field(alias="GENAI_CPD_USERNAME")
    genai_cpd_password: Optional[GenaiCpdPassword] = Field(default=None, alias="GENAI_CPD_PASSWORD")
    genai_cpd_api_key: Optional[GenaiCpdApiKey] = Field(default=None, alias="GENAI_CPD_API_KEY")
    __properties: ClassVar[List[str]] = ["GENAI_API", "GENAI_PROJECT_ID", "GENAI_CPD_URL", "GENAI_CPD_VERIFY_TLS", "GENAI_CPD_USERNAME", "GENAI_CPD_PASSWORD", "GENAI_CPD_API_KEY"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenAICPDConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of genai_cpd_password
        if self.genai_cpd_password:
            _dict['GENAI_CPD_PASSWORD'] = self.genai_cpd_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of genai_cpd_api_key
        if self.genai_cpd_api_key:
            _dict['GENAI_CPD_API_KEY'] = self.genai_cpd_api_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenAICPDConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "GENAI_API": obj.get("GENAI_API"),
            "GENAI_PROJECT_ID": obj.get("GENAI_PROJECT_ID"),
            "GENAI_CPD_URL": obj.get("GENAI_CPD_URL"),
            "GENAI_CPD_VERIFY_TLS": obj.get("GENAI_CPD_VERIFY_TLS") if obj.get("GENAI_CPD_VERIFY_TLS") is not None else True,
            "GENAI_CPD_USERNAME": obj.get("GENAI_CPD_USERNAME"),
            "GENAI_CPD_PASSWORD": GenaiCpdPassword.from_dict(obj["GENAI_CPD_PASSWORD"]) if obj.get("GENAI_CPD_PASSWORD") is not None else None,
            "GENAI_CPD_API_KEY": GenaiCpdApiKey.from_dict(obj["GENAI_CPD_API_KEY"]) if obj.get("GENAI_CPD_API_KEY") is not None else None
        })
        return _obj


