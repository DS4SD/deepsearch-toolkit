# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.alternate_names import AlternateNames
from deepsearch.cps.apis.public_v2.models.identifiers1 import Identifiers1
from deepsearch.cps.apis.public_v2.models.issue import Issue
from deepsearch.cps.apis.public_v2.models.pages import Pages
from deepsearch.cps.apis.public_v2.models.type1 import Type1
from deepsearch.cps.apis.public_v2.models.url import Url
from deepsearch.cps.apis.public_v2.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class Publication(BaseModel):
    """
    Publication details of a journal or venue.
    """ # noqa: E501
    identifiers: Optional[Identifiers1] = None
    name: StrictStr = Field(description="Name of the publication.")
    alternate_names: Optional[AlternateNames] = None
    type: Optional[Type1] = None
    pages: Optional[Pages] = None
    issue: Optional[Issue] = None
    volume: Optional[Volume] = None
    url: Optional[Url] = None
    __properties: ClassVar[List[str]] = ["identifiers", "name", "alternate_names", "type", "pages", "issue", "volume", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Publication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identifiers
        if self.identifiers:
            _dict['identifiers'] = self.identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alternate_names
        if self.alternate_names:
            _dict['alternate_names'] = self.alternate_names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pages
        if self.pages:
            _dict['pages'] = self.pages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue
        if self.issue:
            _dict['issue'] = self.issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume
        if self.volume:
            _dict['volume'] = self.volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Publication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identifiers": Identifiers1.from_dict(obj["identifiers"]) if obj.get("identifiers") is not None else None,
            "name": obj.get("name"),
            "alternate_names": AlternateNames.from_dict(obj["alternate_names"]) if obj.get("alternate_names") is not None else None,
            "type": Type1.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "pages": Pages.from_dict(obj["pages"]) if obj.get("pages") is not None else None,
            "issue": Issue.from_dict(obj["issue"]) if obj.get("issue") is not None else None,
            "volume": Volume.from_dict(obj["volume"]) if obj.get("volume") is not None else None,
            "url": Url.from_dict(obj["url"]) if obj.get("url") is not None else None
        })
        return _obj


