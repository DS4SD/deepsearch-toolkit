# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.aggs import Aggs
from deepsearch.cps.apis.public_v2.models.model_from import ModelFrom
from deepsearch.cps.apis.public_v2.models.query import Query
from deepsearch.cps.apis.public_v2.models.size1 import Size1
from deepsearch.cps.apis.public_v2.models.sort import Sort
from deepsearch.cps.apis.public_v2.models.source2 import Source2
from typing import Optional, Set
from typing_extensions import Self

class ElasticIndexSearchQueryOptions(BaseModel):
    """
    ElasticIndexSearchQueryOptions
    """ # noqa: E501
    source: Optional[Source2] = Field(default=None, alias="_source")
    from_: Optional[ModelFrom] = None
    size: Optional[Size1] = None
    query: Optional[Query] = None
    aggs: Optional[Aggs] = None
    sort: Optional[Sort] = None
    __properties: ClassVar[List[str]] = ["_source", "from_", "size", "query", "aggs", "sort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElasticIndexSearchQueryOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['_source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_
        if self.from_:
            _dict['from_'] = self.from_.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggs
        if self.aggs:
            _dict['aggs'] = self.aggs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElasticIndexSearchQueryOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_source": Source2.from_dict(obj["_source"]) if obj.get("_source") is not None else None,
            "from_": ModelFrom.from_dict(obj["from_"]) if obj.get("from_") is not None else None,
            "size": Size1.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "query": Query.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "aggs": Aggs.from_dict(obj["aggs"]) if obj.get("aggs") is not None else None,
            "sort": Sort.from_dict(obj["sort"]) if obj.get("sort") is not None else None
        })
        return _obj


