# coding: utf-8

"""
    Deep Search (DS) API

    API for Deep Search.  **WARNING**: This API is subject to change without warning!

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from deepsearch.cps.apis.public_v2.models.abstract import Abstract
from deepsearch.cps.apis.public_v2.models.affiliations import Affiliations
from deepsearch.cps.apis.public_v2.models.authors import Authors
from deepsearch.cps.apis.public_v2.models.citation_count import CitationCount
from deepsearch.cps.apis.public_v2.models.citation_count_date import CitationCountDate
from deepsearch.cps.apis.public_v2.models.document_description_acquisition import DocumentDescriptionAcquisition
from deepsearch.cps.apis.public_v2.models.document_description_advanced import DocumentDescriptionAdvanced
from deepsearch.cps.apis.public_v2.models.document_description_license import DocumentDescriptionLicense
from deepsearch.cps.apis.public_v2.models.keywords import Keywords
from deepsearch.cps.apis.public_v2.models.languages import Languages
from deepsearch.cps.apis.public_v2.models.publication1 import Publication1
from deepsearch.cps.apis.public_v2.models.publication_date import PublicationDate
from deepsearch.cps.apis.public_v2.models.publishers import Publishers
from deepsearch.cps.apis.public_v2.models.reference_count import ReferenceCount
from deepsearch.cps.apis.public_v2.models.references import References
from deepsearch.cps.apis.public_v2.models.subjects import Subjects
from deepsearch.cps.apis.public_v2.models.title import Title
from deepsearch.cps.apis.public_v2.models.url_refs import UrlRefs
from typing import Optional, Set
from typing_extensions import Self

class DocumentDescription(BaseModel):
    """
    DocumentDescription
    """ # noqa: E501
    title: Optional[Title] = None
    abstract: Optional[Abstract] = None
    authors: Optional[Authors] = None
    affiliations: Optional[Affiliations] = None
    subjects: Optional[Subjects] = None
    keywords: Optional[Keywords] = None
    publication_date: Optional[PublicationDate] = None
    languages: Optional[Languages] = None
    license: Optional[DocumentDescriptionLicense] = None
    publishers: Optional[Publishers] = None
    url_refs: Optional[UrlRefs] = None
    references: Optional[References] = None
    publication: Optional[Publication1] = None
    reference_count: Optional[ReferenceCount] = None
    citation_count: Optional[CitationCount] = None
    citation_date: Optional[CitationCountDate] = None
    advanced: Optional[DocumentDescriptionAdvanced] = None
    analytics: Optional[DocumentDescriptionAdvanced] = None
    acquisition: Optional[DocumentDescriptionAcquisition] = None
    __properties: ClassVar[List[str]] = ["title", "abstract", "authors", "affiliations", "subjects", "keywords", "publication_date", "languages", "license", "publishers", "url_refs", "references", "publication", "reference_count", "citation_count", "citation_date", "advanced", "analytics", "acquisition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of abstract
        if self.abstract:
            _dict['abstract'] = self.abstract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authors
        if self.authors:
            _dict['authors'] = self.authors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affiliations
        if self.affiliations:
            _dict['affiliations'] = self.affiliations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subjects
        if self.subjects:
            _dict['subjects'] = self.subjects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keywords
        if self.keywords:
            _dict['keywords'] = self.keywords.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publication_date
        if self.publication_date:
            _dict['publication_date'] = self.publication_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of languages
        if self.languages:
            _dict['languages'] = self.languages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publishers
        if self.publishers:
            _dict['publishers'] = self.publishers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_refs
        if self.url_refs:
            _dict['url_refs'] = self.url_refs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publication
        if self.publication:
            _dict['publication'] = self.publication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_count
        if self.reference_count:
            _dict['reference_count'] = self.reference_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of citation_count
        if self.citation_count:
            _dict['citation_count'] = self.citation_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of citation_date
        if self.citation_date:
            _dict['citation_date'] = self.citation_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advanced
        if self.advanced:
            _dict['advanced'] = self.advanced.to_dict()
        # override the default output from pydantic by calling `to_dict()` of analytics
        if self.analytics:
            _dict['analytics'] = self.analytics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of acquisition
        if self.acquisition:
            _dict['acquisition'] = self.acquisition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": Title.from_dict(obj["title"]) if obj.get("title") is not None else None,
            "abstract": Abstract.from_dict(obj["abstract"]) if obj.get("abstract") is not None else None,
            "authors": Authors.from_dict(obj["authors"]) if obj.get("authors") is not None else None,
            "affiliations": Affiliations.from_dict(obj["affiliations"]) if obj.get("affiliations") is not None else None,
            "subjects": Subjects.from_dict(obj["subjects"]) if obj.get("subjects") is not None else None,
            "keywords": Keywords.from_dict(obj["keywords"]) if obj.get("keywords") is not None else None,
            "publication_date": PublicationDate.from_dict(obj["publication_date"]) if obj.get("publication_date") is not None else None,
            "languages": Languages.from_dict(obj["languages"]) if obj.get("languages") is not None else None,
            "license": DocumentDescriptionLicense.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "publishers": Publishers.from_dict(obj["publishers"]) if obj.get("publishers") is not None else None,
            "url_refs": UrlRefs.from_dict(obj["url_refs"]) if obj.get("url_refs") is not None else None,
            "references": References.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "publication": Publication1.from_dict(obj["publication"]) if obj.get("publication") is not None else None,
            "reference_count": ReferenceCount.from_dict(obj["reference_count"]) if obj.get("reference_count") is not None else None,
            "citation_count": CitationCount.from_dict(obj["citation_count"]) if obj.get("citation_count") is not None else None,
            "citation_date": CitationCountDate.from_dict(obj["citation_date"]) if obj.get("citation_date") is not None else None,
            "advanced": DocumentDescriptionAdvanced.from_dict(obj["advanced"]) if obj.get("advanced") is not None else None,
            "analytics": DocumentDescriptionAdvanced.from_dict(obj["analytics"]) if obj.get("analytics") is not None else None,
            "acquisition": DocumentDescriptionAcquisition.from_dict(obj["acquisition"]) if obj.get("acquisition") is not None else None
        })
        return _obj


